   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB124:
  14               		.file 1 "./tmk_core/protocol/lufa/lufa.c"
   1:./tmk_core/protocol/lufa/lufa.c **** /*
   2:./tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:./tmk_core/protocol/lufa/lufa.c ****  */
   7:./tmk_core/protocol/lufa/lufa.c **** 
   8:./tmk_core/protocol/lufa/lufa.c **** /*
   9:./tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:./tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:./tmk_core/protocol/lufa/lufa.c **** 
  12:./tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:./tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:./tmk_core/protocol/lufa/lufa.c **** */
  15:./tmk_core/protocol/lufa/lufa.c **** 
  16:./tmk_core/protocol/lufa/lufa.c **** /*
  17:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:./tmk_core/protocol/lufa/lufa.c **** 
  20:./tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:./tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:./tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:./tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:./tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:./tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:./tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:./tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:./tmk_core/protocol/lufa/lufa.c **** 
  29:./tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:./tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:./tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:./tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:./tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:./tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:./tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:./tmk_core/protocol/lufa/lufa.c ****   this software.
  37:./tmk_core/protocol/lufa/lufa.c **** */
  38:./tmk_core/protocol/lufa/lufa.c **** 
  39:./tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:./tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:./tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:./tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:./tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:./tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:./tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:./tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:./tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:./tmk_core/protocol/lufa/lufa.c **** #endif
  50:./tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:./tmk_core/protocol/lufa/lufa.c **** 
  52:./tmk_core/protocol/lufa/lufa.c **** #include "descriptor.h"
  53:./tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:./tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:./tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:./tmk_core/protocol/lufa/lufa.c **** 
  57:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  58:./tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  59:./tmk_core/protocol/lufa/lufa.c **** 
  60:./tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  61:./tmk_core/protocol/lufa/lufa.c **** #endif
  62:./tmk_core/protocol/lufa/lufa.c **** 
  63:./tmk_core/protocol/lufa/lufa.c **** 
  64:./tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  65:./tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  66:./tmk_core/protocol/lufa/lufa.c **** #endif
  67:./tmk_core/protocol/lufa/lufa.c **** 
  68:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  69:./tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  70:./tmk_core/protocol/lufa/lufa.c **** #endif
  71:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
  72:./tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  73:./tmk_core/protocol/lufa/lufa.c **** #endif
  74:./tmk_core/protocol/lufa/lufa.c **** 
  75:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  76:./tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  77:./tmk_core/protocol/lufa/lufa.c **** #endif
  78:./tmk_core/protocol/lufa/lufa.c **** 
  79:./tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  80:./tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  81:./tmk_core/protocol/lufa/lufa.c **** #endif
  82:./tmk_core/protocol/lufa/lufa.c **** 
  83:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  84:./tmk_core/protocol/lufa/lufa.c ****   #include "sysex_tools.h"
  85:./tmk_core/protocol/lufa/lufa.c **** #endif
  86:./tmk_core/protocol/lufa/lufa.c **** 
  87:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  88:./tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  89:./tmk_core/protocol/lufa/lufa.c **** #endif
  90:./tmk_core/protocol/lufa/lufa.c **** 
  91:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  92:./tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  93:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  94:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  95:./tmk_core/protocol/lufa/lufa.c **** 
  96:./tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  97:./tmk_core/protocol/lufa/lufa.c **** 
  98:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  99:./tmk_core/protocol/lufa/lufa.c **** static void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t 
 100:./tmk_core/protocol/lufa/lufa.c **** static void usb_get_midi(MidiDevice * device);
 101:./tmk_core/protocol/lufa/lufa.c **** static void midi_usb_init(MidiDevice * device);
 102:./tmk_core/protocol/lufa/lufa.c **** #endif
 103:./tmk_core/protocol/lufa/lufa.c **** 
 104:./tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 105:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 106:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 107:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 108:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 109:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 110:./tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 111:./tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 112:./tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 113:./tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 114:./tmk_core/protocol/lufa/lufa.c ****     send_system,
 115:./tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 116:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 117:./tmk_core/protocol/lufa/lufa.c ****     usb_send_func,
 118:./tmk_core/protocol/lufa/lufa.c ****     usb_get_midi,
 119:./tmk_core/protocol/lufa/lufa.c ****     midi_usb_init
 120:./tmk_core/protocol/lufa/lufa.c **** #endif
 121:./tmk_core/protocol/lufa/lufa.c **** };
 122:./tmk_core/protocol/lufa/lufa.c **** 
 123:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 124:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 125:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 126:./tmk_core/protocol/lufa/lufa.c **** 
 127:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 128:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 129:./tmk_core/protocol/lufa/lufa.c **** {
 130:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 131:./tmk_core/protocol/lufa/lufa.c ****   {
 132:./tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 133:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 134:./tmk_core/protocol/lufa/lufa.c ****     {
 135:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 136:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 137:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 138:./tmk_core/protocol/lufa/lufa.c ****     },
 139:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 140:./tmk_core/protocol/lufa/lufa.c ****     {
 141:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 142:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 143:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 144:./tmk_core/protocol/lufa/lufa.c ****     },
 145:./tmk_core/protocol/lufa/lufa.c ****   },
 146:./tmk_core/protocol/lufa/lufa.c **** };
 147:./tmk_core/protocol/lufa/lufa.c **** 
 148:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_START_OR_CONT 0x40
 149:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_1 0x50
 150:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_2 0x60
 151:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_3 0x70
 152:./tmk_core/protocol/lufa/lufa.c **** 
 153:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_1 0x50
 154:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_2 0x20
 155:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_3 0x30
 156:./tmk_core/protocol/lufa/lufa.c **** #endif
 157:./tmk_core/protocol/lufa/lufa.c **** 
 158:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 159:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 160:./tmk_core/protocol/lufa/lufa.c **** {
 161:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 162:./tmk_core/protocol/lufa/lufa.c ****   {
 163:./tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 164:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 165:./tmk_core/protocol/lufa/lufa.c ****     {
 166:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 167:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 168:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 169:./tmk_core/protocol/lufa/lufa.c ****     },
 170:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 171:./tmk_core/protocol/lufa/lufa.c ****     {
 172:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 173:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 174:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 175:./tmk_core/protocol/lufa/lufa.c ****     },
 176:./tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 177:./tmk_core/protocol/lufa/lufa.c ****     {
 178:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 179:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 180:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 181:./tmk_core/protocol/lufa/lufa.c ****     },
 182:./tmk_core/protocol/lufa/lufa.c ****   },
 183:./tmk_core/protocol/lufa/lufa.c **** };
 184:./tmk_core/protocol/lufa/lufa.c **** #endif
 185:./tmk_core/protocol/lufa/lufa.c **** 
 186:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 187:./tmk_core/protocol/lufa/lufa.c **** 
 188:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 189:./tmk_core/protocol/lufa/lufa.c **** {
 190:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 191:./tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 192:./tmk_core/protocol/lufa/lufa.c **** 	{
 193:./tmk_core/protocol/lufa/lufa.c **** 		return;
 194:./tmk_core/protocol/lufa/lufa.c **** 	}
 195:./tmk_core/protocol/lufa/lufa.c **** 
 196:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 197:./tmk_core/protocol/lufa/lufa.c **** 	{
 198:./tmk_core/protocol/lufa/lufa.c **** 		return;
 199:./tmk_core/protocol/lufa/lufa.c **** 	}
 200:./tmk_core/protocol/lufa/lufa.c **** 
 201:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 202:./tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 203:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 204:./tmk_core/protocol/lufa/lufa.c **** 
 205:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 206:./tmk_core/protocol/lufa/lufa.c **** 
 207:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 208:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 209:./tmk_core/protocol/lufa/lufa.c **** 	{
 210:./tmk_core/protocol/lufa/lufa.c **** 		// Write data
 211:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 212:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 213:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 214:./tmk_core/protocol/lufa/lufa.c **** 	}
 215:./tmk_core/protocol/lufa/lufa.c **** 
 216:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 217:./tmk_core/protocol/lufa/lufa.c **** }
 218:./tmk_core/protocol/lufa/lufa.c **** 
 219:./tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 220:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 221:./tmk_core/protocol/lufa/lufa.c **** {
 222:./tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 223:./tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 224:./tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 225:./tmk_core/protocol/lufa/lufa.c **** }
 226:./tmk_core/protocol/lufa/lufa.c **** 
 227:./tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 228:./tmk_core/protocol/lufa/lufa.c **** {
 229:./tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 230:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 231:./tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 232:./tmk_core/protocol/lufa/lufa.c **** 
 233:./tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 234:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 235:./tmk_core/protocol/lufa/lufa.c **** 	return;
 236:./tmk_core/protocol/lufa/lufa.c **** 
 237:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 238:./tmk_core/protocol/lufa/lufa.c **** 
 239:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 240:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 241:./tmk_core/protocol/lufa/lufa.c **** 	{
 242:./tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 243:./tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 244:./tmk_core/protocol/lufa/lufa.c **** 		{
 245:./tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 246:./tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 247:./tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 248:./tmk_core/protocol/lufa/lufa.c **** 		}
 249:./tmk_core/protocol/lufa/lufa.c **** 
 250:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 251:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 252:./tmk_core/protocol/lufa/lufa.c **** 
 253:./tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 254:./tmk_core/protocol/lufa/lufa.c **** 		{
 255:./tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 256:./tmk_core/protocol/lufa/lufa.c **** 		}
 257:./tmk_core/protocol/lufa/lufa.c **** 	}
 258:./tmk_core/protocol/lufa/lufa.c **** }
 259:./tmk_core/protocol/lufa/lufa.c **** #endif
 260:./tmk_core/protocol/lufa/lufa.c **** 
 261:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 262:./tmk_core/protocol/lufa/lufa.c ****  * Console
 263:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 264:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 265:./tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 266:./tmk_core/protocol/lufa/lufa.c **** {
 267:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 268:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 269:./tmk_core/protocol/lufa/lufa.c ****         return;
 270:./tmk_core/protocol/lufa/lufa.c **** 
 271:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 272:./tmk_core/protocol/lufa/lufa.c **** 
 273:./tmk_core/protocol/lufa/lufa.c **** #if 0
 274:./tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 275:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 276:./tmk_core/protocol/lufa/lufa.c **** 
 277:./tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 278:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 279:./tmk_core/protocol/lufa/lufa.c ****     {
 280:./tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 281:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 282:./tmk_core/protocol/lufa/lufa.c ****         {
 283:./tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 284:./tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 285:./tmk_core/protocol/lufa/lufa.c **** 
 286:./tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 287:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 288:./tmk_core/protocol/lufa/lufa.c **** 
 289:./tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 290:./tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 291:./tmk_core/protocol/lufa/lufa.c ****         }
 292:./tmk_core/protocol/lufa/lufa.c **** 
 293:./tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 294:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 295:./tmk_core/protocol/lufa/lufa.c ****     }
 296:./tmk_core/protocol/lufa/lufa.c **** #endif
 297:./tmk_core/protocol/lufa/lufa.c **** 
 298:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 299:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 300:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 301:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 302:./tmk_core/protocol/lufa/lufa.c ****         return;
 303:./tmk_core/protocol/lufa/lufa.c ****     }
 304:./tmk_core/protocol/lufa/lufa.c **** 
 305:./tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 306:./tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 307:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 308:./tmk_core/protocol/lufa/lufa.c **** 
 309:./tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 310:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 311:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 312:./tmk_core/protocol/lufa/lufa.c ****     }
 313:./tmk_core/protocol/lufa/lufa.c **** 
 314:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 315:./tmk_core/protocol/lufa/lufa.c **** }
 316:./tmk_core/protocol/lufa/lufa.c **** #endif
 317:./tmk_core/protocol/lufa/lufa.c **** 
 318:./tmk_core/protocol/lufa/lufa.c **** 
 319:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 320:./tmk_core/protocol/lufa/lufa.c ****  * USB Events
 321:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 322:./tmk_core/protocol/lufa/lufa.c **** /*
 323:./tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 324:./tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 325:./tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 326:./tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 327:./tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 328:./tmk_core/protocol/lufa/lufa.c **** */
 329:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 330:./tmk_core/protocol/lufa/lufa.c **** {
 331:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 332:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 333:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 334:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 335:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 336:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 337:./tmk_core/protocol/lufa/lufa.c ****     }
 338:./tmk_core/protocol/lufa/lufa.c **** }
 339:./tmk_core/protocol/lufa/lufa.c **** 
 340:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 341:./tmk_core/protocol/lufa/lufa.c **** {
 342:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 343:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 344:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 345:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 346:./tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 347:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 348:./tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 349:./tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 350:./tmk_core/protocol/lufa/lufa.c ****     }
 351:./tmk_core/protocol/lufa/lufa.c **** */
 352:./tmk_core/protocol/lufa/lufa.c **** }
 353:./tmk_core/protocol/lufa/lufa.c **** 
 354:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 355:./tmk_core/protocol/lufa/lufa.c **** {
 356:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 357:./tmk_core/protocol/lufa/lufa.c **** }
 358:./tmk_core/protocol/lufa/lufa.c **** 
 359:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 360:./tmk_core/protocol/lufa/lufa.c **** {
 361:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 362:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 363:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 364:./tmk_core/protocol/lufa/lufa.c **** #endif
 365:./tmk_core/protocol/lufa/lufa.c **** }
 366:./tmk_core/protocol/lufa/lufa.c **** 
 367:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 368:./tmk_core/protocol/lufa/lufa.c **** {
 369:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 370:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 371:./tmk_core/protocol/lufa/lufa.c **** 
 372:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 373:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 374:./tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 375:./tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 376:./tmk_core/protocol/lufa/lufa.c **** #endif
 377:./tmk_core/protocol/lufa/lufa.c **** }
 378:./tmk_core/protocol/lufa/lufa.c **** 
 379:./tmk_core/protocol/lufa/lufa.c **** 
 380:./tmk_core/protocol/lufa/lufa.c **** 
 381:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 382:./tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 383:./tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 384:./tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 385:./tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 386:./tmk_core/protocol/lufa/lufa.c ****   } \
 387:./tmk_core/protocol/lufa/lufa.c **** } while (0)
 388:./tmk_core/protocol/lufa/lufa.c **** 
 389:./tmk_core/protocol/lufa/lufa.c **** // called every 1ms
 390:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 391:./tmk_core/protocol/lufa/lufa.c **** {
 392:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 393:./tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 394:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 395:./tmk_core/protocol/lufa/lufa.c **** 
 396:./tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 397:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 398:./tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 399:./tmk_core/protocol/lufa/lufa.c **** }
 400:./tmk_core/protocol/lufa/lufa.c **** 
 401:./tmk_core/protocol/lufa/lufa.c **** #endif
 402:./tmk_core/protocol/lufa/lufa.c **** 
 403:./tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ConfigurationChanged event.
 404:./tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 405:./tmk_core/protocol/lufa/lufa.c ****  *
 406:./tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 407:./tmk_core/protocol/lufa/lufa.c ****  * it is safe to use singl bank for all endpoints.
 408:./tmk_core/protocol/lufa/lufa.c ****  */
 409:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 410:./tmk_core/protocol/lufa/lufa.c **** {
 411:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 412:./tmk_core/protocol/lufa/lufa.c **** 
 413:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 414:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 415:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 416:./tmk_core/protocol/lufa/lufa.c **** 
 417:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 418:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 419:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 420:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 421:./tmk_core/protocol/lufa/lufa.c **** #endif
 422:./tmk_core/protocol/lufa/lufa.c **** 
 423:./tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 424:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 425:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 426:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 427:./tmk_core/protocol/lufa/lufa.c **** #endif
 428:./tmk_core/protocol/lufa/lufa.c **** 
 429:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 430:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 431:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 432:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 433:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 434:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 435:./tmk_core/protocol/lufa/lufa.c **** #endif
 436:./tmk_core/protocol/lufa/lufa.c **** 
 437:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 438:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 439:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 440:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:./tmk_core/protocol/lufa/lufa.c **** #if 0
 442:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 443:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 444:./tmk_core/protocol/lufa/lufa.c **** #endif
 445:./tmk_core/protocol/lufa/lufa.c **** #endif
 446:./tmk_core/protocol/lufa/lufa.c **** 
 447:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 448:./tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 449:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 450:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 451:./tmk_core/protocol/lufa/lufa.c **** #endif
 452:./tmk_core/protocol/lufa/lufa.c **** 
 453:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 454:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 455:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 456:./tmk_core/protocol/lufa/lufa.c **** #endif
 457:./tmk_core/protocol/lufa/lufa.c **** 
 458:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 459:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 460:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 461:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 462:./tmk_core/protocol/lufa/lufa.c **** #endif
 463:./tmk_core/protocol/lufa/lufa.c **** }
 464:./tmk_core/protocol/lufa/lufa.c **** 
 465:./tmk_core/protocol/lufa/lufa.c **** /*
 466:./tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 467:./tmk_core/protocol/lufa/lufa.c **** 
 468:./tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 469:./tmk_core/protocol/lufa/lufa.c **** 
 470:./tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 471:./tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 472:./tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 473:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 474:./tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 475:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 476:./tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 477:./tmk_core/protocol/lufa/lufa.c **** */
 478:./tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ControlRequest event.
 479:./tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 480:./tmk_core/protocol/lufa/lufa.c ****  */
 481:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 482:./tmk_core/protocol/lufa/lufa.c **** {
 483:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 484:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 485:./tmk_core/protocol/lufa/lufa.c **** 
 486:./tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 487:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 488:./tmk_core/protocol/lufa/lufa.c ****     {
 489:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 490:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 491:./tmk_core/protocol/lufa/lufa.c ****             {
 492:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 493:./tmk_core/protocol/lufa/lufa.c **** 
 494:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 495:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 496:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 497:./tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 498:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 499:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 500:./tmk_core/protocol/lufa/lufa.c ****                     break;
 501:./tmk_core/protocol/lufa/lufa.c ****                 }
 502:./tmk_core/protocol/lufa/lufa.c **** 
 503:./tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 504:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 505:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 506:./tmk_core/protocol/lufa/lufa.c ****             }
 507:./tmk_core/protocol/lufa/lufa.c **** 
 508:./tmk_core/protocol/lufa/lufa.c ****             break;
 509:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 510:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 511:./tmk_core/protocol/lufa/lufa.c ****             {
 512:./tmk_core/protocol/lufa/lufa.c **** 
 513:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 514:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 515:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 516:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 517:./tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 518:./tmk_core/protocol/lufa/lufa.c **** #endif
 519:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 520:./tmk_core/protocol/lufa/lufa.c **** 
 521:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 522:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 523:./tmk_core/protocol/lufa/lufa.c ****                           return;
 524:./tmk_core/protocol/lufa/lufa.c ****                     }
 525:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 526:./tmk_core/protocol/lufa/lufa.c **** 
 527:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 528:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 529:./tmk_core/protocol/lufa/lufa.c ****                     break;
 530:./tmk_core/protocol/lufa/lufa.c ****                 }
 531:./tmk_core/protocol/lufa/lufa.c **** 
 532:./tmk_core/protocol/lufa/lufa.c ****             }
 533:./tmk_core/protocol/lufa/lufa.c **** 
 534:./tmk_core/protocol/lufa/lufa.c ****             break;
 535:./tmk_core/protocol/lufa/lufa.c **** 
 536:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 537:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 538:./tmk_core/protocol/lufa/lufa.c ****             {
 539:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 541:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 543:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 544:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 545:./tmk_core/protocol/lufa/lufa.c ****                 }
 546:./tmk_core/protocol/lufa/lufa.c ****             }
 547:./tmk_core/protocol/lufa/lufa.c **** 
 548:./tmk_core/protocol/lufa/lufa.c ****             break;
 549:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 550:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 551:./tmk_core/protocol/lufa/lufa.c ****             {
 552:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 553:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 554:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 555:./tmk_core/protocol/lufa/lufa.c **** 
 556:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 557:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 558:./tmk_core/protocol/lufa/lufa.c ****                 }
 559:./tmk_core/protocol/lufa/lufa.c ****             }
 560:./tmk_core/protocol/lufa/lufa.c **** 
 561:./tmk_core/protocol/lufa/lufa.c ****             break;
 562:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 563:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 564:./tmk_core/protocol/lufa/lufa.c ****             {
 565:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 566:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 567:./tmk_core/protocol/lufa/lufa.c **** 
 568:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 569:./tmk_core/protocol/lufa/lufa.c ****             }
 570:./tmk_core/protocol/lufa/lufa.c **** 
 571:./tmk_core/protocol/lufa/lufa.c ****             break;
 572:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 573:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 574:./tmk_core/protocol/lufa/lufa.c ****             {
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 576:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 578:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 579:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 580:./tmk_core/protocol/lufa/lufa.c ****             }
 581:./tmk_core/protocol/lufa/lufa.c **** 
 582:./tmk_core/protocol/lufa/lufa.c ****             break;
 583:./tmk_core/protocol/lufa/lufa.c ****     }
 584:./tmk_core/protocol/lufa/lufa.c **** 
 585:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 586:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 587:./tmk_core/protocol/lufa/lufa.c **** #endif
 588:./tmk_core/protocol/lufa/lufa.c **** }
 589:./tmk_core/protocol/lufa/lufa.c **** 
 590:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 591:./tmk_core/protocol/lufa/lufa.c ****  * Host driver
 592:./tmk_core/protocol/lufa/lufa.c **** p
 593:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 594:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 595:./tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 595 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 596:./tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 597:./tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 597 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE124:
  27               		.section	.text.send_consumer,"ax",@progbits
  29               	send_consumer:
  30               	.LFB129:
 598:./tmk_core/protocol/lufa/lufa.c **** 
 599:./tmk_core/protocol/lufa/lufa.c **** #define SendToUSB 1
 600:./tmk_core/protocol/lufa/lufa.c **** #define SendToBT  2
 601:./tmk_core/protocol/lufa/lufa.c **** #define SendToBLE 4
 602:./tmk_core/protocol/lufa/lufa.c **** 
 603:./tmk_core/protocol/lufa/lufa.c **** static inline uint8_t where_to_send(void) {
 604:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 605:./tmk_core/protocol/lufa/lufa.c **** #if 0
 606:./tmk_core/protocol/lufa/lufa.c ****   if (adafruit_ble_is_connected()) {
 607:./tmk_core/protocol/lufa/lufa.c ****     // For testing, send to BLE as a priority
 608:./tmk_core/protocol/lufa/lufa.c ****     return SendToBLE;
 609:./tmk_core/protocol/lufa/lufa.c ****   }
 610:./tmk_core/protocol/lufa/lufa.c **** #endif
 611:./tmk_core/protocol/lufa/lufa.c **** 
 612:./tmk_core/protocol/lufa/lufa.c ****   // This is the real policy
 613:./tmk_core/protocol/lufa/lufa.c ****   if (USB_DeviceState != DEVICE_STATE_Configured) {
 614:./tmk_core/protocol/lufa/lufa.c ****     if (adafruit_ble_is_connected()) {
 615:./tmk_core/protocol/lufa/lufa.c ****       return SendToBLE;
 616:./tmk_core/protocol/lufa/lufa.c ****     }
 617:./tmk_core/protocol/lufa/lufa.c ****   }
 618:./tmk_core/protocol/lufa/lufa.c **** #endif
 619:./tmk_core/protocol/lufa/lufa.c ****   return ((USB_DeviceState == DEVICE_STATE_Configured) ? SendToUSB : 0)
 620:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 621:./tmk_core/protocol/lufa/lufa.c ****     || SendToBT
 622:./tmk_core/protocol/lufa/lufa.c **** #endif
 623:./tmk_core/protocol/lufa/lufa.c ****     ;
 624:./tmk_core/protocol/lufa/lufa.c **** }
 625:./tmk_core/protocol/lufa/lufa.c **** 
 626:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 627:./tmk_core/protocol/lufa/lufa.c **** {
 628:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 629:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 630:./tmk_core/protocol/lufa/lufa.c ****     for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 631:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 632:./tmk_core/protocol/lufa/lufa.c ****     }
 633:./tmk_core/protocol/lufa/lufa.c **** #endif
 634:./tmk_core/protocol/lufa/lufa.c **** 
 635:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 636:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 637:./tmk_core/protocol/lufa/lufa.c **** 
 638:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 639:./tmk_core/protocol/lufa/lufa.c ****     if (where & SendToBLE) {
 640:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 641:./tmk_core/protocol/lufa/lufa.c ****     }
 642:./tmk_core/protocol/lufa/lufa.c **** #endif
 643:./tmk_core/protocol/lufa/lufa.c **** 
 644:./tmk_core/protocol/lufa/lufa.c ****     if (!(where & SendToUSB)) {
 645:./tmk_core/protocol/lufa/lufa.c ****       return;
 646:./tmk_core/protocol/lufa/lufa.c ****     }
 647:./tmk_core/protocol/lufa/lufa.c **** 
 648:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 649:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 650:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 651:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 652:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 653:./tmk_core/protocol/lufa/lufa.c **** 
 654:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 655:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 656:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 657:./tmk_core/protocol/lufa/lufa.c **** 
 658:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 659:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 660:./tmk_core/protocol/lufa/lufa.c ****     }
 661:./tmk_core/protocol/lufa/lufa.c ****     else
 662:./tmk_core/protocol/lufa/lufa.c **** #endif
 663:./tmk_core/protocol/lufa/lufa.c ****     {
 664:./tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 665:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 666:./tmk_core/protocol/lufa/lufa.c **** 
 667:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 668:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 669:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 670:./tmk_core/protocol/lufa/lufa.c **** 
 671:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 672:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 673:./tmk_core/protocol/lufa/lufa.c ****     }
 674:./tmk_core/protocol/lufa/lufa.c **** 
 675:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 676:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 677:./tmk_core/protocol/lufa/lufa.c **** 
 678:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 679:./tmk_core/protocol/lufa/lufa.c **** }
 680:./tmk_core/protocol/lufa/lufa.c **** 
 681:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 682:./tmk_core/protocol/lufa/lufa.c **** {
 683:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 684:./tmk_core/protocol/lufa/lufa.c **** 
 685:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 686:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 687:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 688:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x03);
 689:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->buttons);
 690:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->x);
 691:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->y);
 692:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->v); // should try sending the wheel v here
 693:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->h); // should try sending the wheel h here
 694:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 695:./tmk_core/protocol/lufa/lufa.c **** #endif
 696:./tmk_core/protocol/lufa/lufa.c **** 
 697:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 698:./tmk_core/protocol/lufa/lufa.c **** 
 699:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 700:./tmk_core/protocol/lufa/lufa.c **** 
 701:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 702:./tmk_core/protocol/lufa/lufa.c ****     if (where & SendToBLE) {
 703:./tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 704:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h);
 705:./tmk_core/protocol/lufa/lufa.c ****     }
 706:./tmk_core/protocol/lufa/lufa.c **** #endif
 707:./tmk_core/protocol/lufa/lufa.c ****     if (!(where & SendToUSB)) {
 708:./tmk_core/protocol/lufa/lufa.c ****       return;
 709:./tmk_core/protocol/lufa/lufa.c ****     }
 710:./tmk_core/protocol/lufa/lufa.c **** 
 711:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 712:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 713:./tmk_core/protocol/lufa/lufa.c **** 
 714:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 715:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 716:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 717:./tmk_core/protocol/lufa/lufa.c **** 
 718:./tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 719:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 720:./tmk_core/protocol/lufa/lufa.c **** 
 721:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 722:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 723:./tmk_core/protocol/lufa/lufa.c **** #endif
 724:./tmk_core/protocol/lufa/lufa.c **** }
 725:./tmk_core/protocol/lufa/lufa.c **** 
 726:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 727:./tmk_core/protocol/lufa/lufa.c **** {
 728:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 729:./tmk_core/protocol/lufa/lufa.c **** 
 730:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 731:./tmk_core/protocol/lufa/lufa.c ****         return;
 732:./tmk_core/protocol/lufa/lufa.c **** 
 733:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 734:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 735:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 736:./tmk_core/protocol/lufa/lufa.c ****     };
 737:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 738:./tmk_core/protocol/lufa/lufa.c **** 
 739:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 740:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 741:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 742:./tmk_core/protocol/lufa/lufa.c **** 
 743:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 744:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 745:./tmk_core/protocol/lufa/lufa.c **** }
 746:./tmk_core/protocol/lufa/lufa.c **** 
 747:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 748:./tmk_core/protocol/lufa/lufa.c **** {
  31               		.loc 1 748 0
  32               		.cfi_startproc
  33               	.LVL0:
  34 0000 CF93      		push r28
  35               	.LCFI0:
  36               		.cfi_def_cfa_offset 3
  37               		.cfi_offset 28, -2
  38 0002 DF93      		push r29
  39               	.LCFI1:
  40               		.cfi_def_cfa_offset 4
  41               		.cfi_offset 29, -3
  42 0004 00D0      		rcall .
  43 0006 1F92      		push __zero_reg__
  44               	.LCFI2:
  45               		.cfi_def_cfa_offset 7
  46 0008 CDB7      		in r28,__SP_L__
  47 000a DEB7      		in r29,__SP_H__
  48               	.LCFI3:
  49               		.cfi_def_cfa_register 28
  50               	/* prologue: function */
  51               	/* frame size = 3 */
  52               	/* stack size = 5 */
  53               	.L__stack_usage = 5
  54 000c 9C01      		movw r18,r24
  55               	.LVL1:
  56               	.LBB119:
  57               	.LBB120:
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  58               		.loc 1 619 0
  59 000e 8091 0000 		lds r24,USB_DeviceState
  60               	.LVL2:
  61               	.LBE120:
  62               	.LBE119:
 749:./tmk_core/protocol/lufa/lufa.c **** 
 750:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 751:./tmk_core/protocol/lufa/lufa.c ****     static uint16_t last_data = 0;
 752:./tmk_core/protocol/lufa/lufa.c ****     if (data == last_data) return;
 753:./tmk_core/protocol/lufa/lufa.c ****     last_data = data;
 754:./tmk_core/protocol/lufa/lufa.c ****     uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 755:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 756:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 757:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x02);
 758:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send((bitmap>>8)&0xFF);
 759:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(bitmap&0xFF);
 760:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 761:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 762:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 763:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 764:./tmk_core/protocol/lufa/lufa.c **** #endif
 765:./tmk_core/protocol/lufa/lufa.c **** 
 766:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 767:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 768:./tmk_core/protocol/lufa/lufa.c **** 
 769:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 770:./tmk_core/protocol/lufa/lufa.c ****     if (where & SendToBLE) {
 771:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_consumer_key(data, 0);
 772:./tmk_core/protocol/lufa/lufa.c ****     }
 773:./tmk_core/protocol/lufa/lufa.c **** #endif
 774:./tmk_core/protocol/lufa/lufa.c ****     if (!(where & SendToUSB)) {
  63               		.loc 1 774 0
  64 0012 8430      		cpi r24,lo8(4)
  65 0014 01F4      		brne .L2
 775:./tmk_core/protocol/lufa/lufa.c ****       return;
 776:./tmk_core/protocol/lufa/lufa.c ****     }
 777:./tmk_core/protocol/lufa/lufa.c **** 
 778:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  66               		.loc 1 778 0
  67 0016 93E0      		ldi r25,lo8(3)
  68 0018 9983      		std Y+1,r25
  69 001a 3B83      		std Y+3,r19
  70 001c 2A83      		std Y+2,r18
  71               	.LVL3:
  72               	.LBB121:
  73               	.LBB122:
  74               		.file 2 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  75               		.loc 2 270 0
  76 001e 9093 E900 		sts 233,r25
  77               	.LVL4:
  78 0022 8FEF      		ldi r24,lo8(-1)
  79               	.LVL5:
  80               	.L4:
  81               	.LBE122:
  82               	.LBE121:
  83               	.LBB123:
  84               	.LBB124:
 271:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  85               		.loc 2 360 0
  86 0024 9091 E800 		lds r25,232
  87 0028 8150      		subi r24,lo8(-(-1))
  88               	.LVL6:
  89               	.LBE124:
  90               	.LBE123:
 779:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 780:./tmk_core/protocol/lufa/lufa.c ****         .usage = data
 781:./tmk_core/protocol/lufa/lufa.c ****     };
 782:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 783:./tmk_core/protocol/lufa/lufa.c **** 
 784:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 785:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
  91               		.loc 1 785 0
  92 002a 95FD      		sbrc r25,5
  93 002c 00C0      		rjmp .L5
  94               	.LVL7:
  95               	.LBB125:
  96               	.LBB126:
  97               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164:/usr/lib/avr/include/util/delay.h **** 
 165:/usr/lib/avr/include/util/delay.h **** #else
 166:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/lib/avr/include/util/delay.h **** 
 234:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/lib/avr/include/util/delay.h **** 
 237:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/lib/avr/include/util/delay.h **** 
 240:/usr/lib/avr/include/util/delay.h **** 	#else
 241:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 242:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/lib/avr/include/util/delay.h **** 	#endif
 244:/usr/lib/avr/include/util/delay.h **** 
 245:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  98               		.loc 3 245 0
  99 002e 95ED      		ldi r25,lo8(-43)
 100 0030 9A95      	1:	dec r25
 101 0032 01F4      		brne 1b
 102 0034 0000      		nop
 103               	.LVL8:
 104               	.LBE126:
 105               	.LBE125:
 106               		.loc 1 785 0
 107 0036 8111      		cpse r24,__zero_reg__
 108 0038 00C0      		rjmp .L4
 109               	.LVL9:
 110               	.L5:
 111               	.LBB127:
 112               	.LBB128:
 113               		.loc 2 360 0
 114 003a 8091 E800 		lds r24,232
 115               	.LBE128:
 116               	.LBE127:
 786:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 117               		.loc 1 786 0
 118 003e 85FF      		sbrs r24,5
 119 0040 00C0      		rjmp .L2
 787:./tmk_core/protocol/lufa/lufa.c **** 
 788:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 120               		.loc 1 788 0
 121 0042 40E0      		ldi r20,0
 122 0044 50E0      		ldi r21,0
 123 0046 63E0      		ldi r22,lo8(3)
 124 0048 70E0      		ldi r23,0
 125 004a CE01      		movw r24,r28
 126 004c 0196      		adiw r24,1
 127 004e 0E94 0000 		call Endpoint_Write_Stream_LE
 128               	.LVL10:
 129               	.LBB129:
 130               	.LBB130:
 361:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 131               		.loc 2 456 0
 132 0052 8091 E800 		lds r24,232
 133 0056 8E77      		andi r24,lo8(126)
 134 0058 8093 E800 		sts 232,r24
 135               	.LVL11:
 136               	.L2:
 137               	/* epilogue start */
 138               	.LBE130:
 139               	.LBE129:
 789:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 790:./tmk_core/protocol/lufa/lufa.c **** }
 140               		.loc 1 790 0
 141 005c 0F90      		pop __tmp_reg__
 142 005e 0F90      		pop __tmp_reg__
 143 0060 0F90      		pop __tmp_reg__
 144 0062 DF91      		pop r29
 145 0064 CF91      		pop r28
 146 0066 0895      		ret
 147               		.cfi_endproc
 148               	.LFE129:
 150               		.section	.text.send_system,"ax",@progbits
 152               	send_system:
 153               	.LFB128:
 727:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 154               		.loc 1 727 0
 155               		.cfi_startproc
 156               	.LVL12:
 157 0000 CF93      		push r28
 158               	.LCFI4:
 159               		.cfi_def_cfa_offset 3
 160               		.cfi_offset 28, -2
 161 0002 DF93      		push r29
 162               	.LCFI5:
 163               		.cfi_def_cfa_offset 4
 164               		.cfi_offset 29, -3
 165 0004 00D0      		rcall .
 166 0006 1F92      		push __zero_reg__
 167               	.LCFI6:
 168               		.cfi_def_cfa_offset 7
 169 0008 CDB7      		in r28,__SP_L__
 170 000a DEB7      		in r29,__SP_H__
 171               	.LCFI7:
 172               		.cfi_def_cfa_register 28
 173               	/* prologue: function */
 174               	/* frame size = 3 */
 175               	/* stack size = 5 */
 176               	.L__stack_usage = 5
 177               	.LVL13:
 730:./tmk_core/protocol/lufa/lufa.c ****         return;
 178               		.loc 1 730 0
 179 000c 2091 0000 		lds r18,USB_DeviceState
 180 0010 2430      		cpi r18,lo8(4)
 181 0012 01F4      		brne .L15
 733:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 182               		.loc 1 733 0
 183 0014 22E0      		ldi r18,lo8(2)
 184 0016 2983      		std Y+1,r18
 735:./tmk_core/protocol/lufa/lufa.c ****     };
 185               		.loc 1 735 0
 186 0018 8058      		subi r24,-128
 187 001a 9109      		sbc r25,__zero_reg__
 188               	.LVL14:
 733:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 189               		.loc 1 733 0
 190 001c 9B83      		std Y+3,r25
 191 001e 8A83      		std Y+2,r24
 192               	.LVL15:
 193               	.LBB131:
 194               	.LBB132:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 195               		.loc 2 270 0
 196 0020 83E0      		ldi r24,lo8(3)
 197               	.LVL16:
 198 0022 8093 E900 		sts 233,r24
 199               	.LVL17:
 200 0026 8FEF      		ldi r24,lo8(-1)
 201               	.LVL18:
 202               	.L17:
 203               	.LBE132:
 204               	.LBE131:
 205               	.LBB133:
 206               	.LBB134:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 207               		.loc 2 360 0
 208 0028 9091 E800 		lds r25,232
 209 002c 8150      		subi r24,lo8(-(-1))
 210               	.LVL19:
 211               	.LBE134:
 212               	.LBE133:
 740:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 213               		.loc 1 740 0
 214 002e 95FD      		sbrc r25,5
 215 0030 00C0      		rjmp .L18
 216               	.LVL20:
 217               	.LBB135:
 218               	.LBB136:
 219               		.loc 3 245 0
 220 0032 95ED      		ldi r25,lo8(-43)
 221 0034 9A95      	1:	dec r25
 222 0036 01F4      		brne 1b
 223 0038 0000      		nop
 224               	.LVL21:
 225               	.LBE136:
 226               	.LBE135:
 740:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 227               		.loc 1 740 0
 228 003a 8111      		cpse r24,__zero_reg__
 229 003c 00C0      		rjmp .L17
 230               	.LVL22:
 231               	.L18:
 232               	.LBB137:
 233               	.LBB138:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 234               		.loc 2 360 0
 235 003e 8091 E800 		lds r24,232
 236               	.LBE138:
 237               	.LBE137:
 741:./tmk_core/protocol/lufa/lufa.c **** 
 238               		.loc 1 741 0
 239 0042 85FF      		sbrs r24,5
 240 0044 00C0      		rjmp .L15
 743:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 241               		.loc 1 743 0
 242 0046 40E0      		ldi r20,0
 243 0048 50E0      		ldi r21,0
 244 004a 63E0      		ldi r22,lo8(3)
 245 004c 70E0      		ldi r23,0
 246 004e CE01      		movw r24,r28
 247 0050 0196      		adiw r24,1
 248 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 249               	.LVL23:
 250               	.LBB139:
 251               	.LBB140:
 252               		.loc 2 456 0
 253 0056 8091 E800 		lds r24,232
 254 005a 8E77      		andi r24,lo8(126)
 255 005c 8093 E800 		sts 232,r24
 256               	.LVL24:
 257               	.L15:
 258               	/* epilogue start */
 259               	.LBE140:
 260               	.LBE139:
 745:./tmk_core/protocol/lufa/lufa.c **** 
 261               		.loc 1 745 0
 262 0060 0F90      		pop __tmp_reg__
 263 0062 0F90      		pop __tmp_reg__
 264 0064 0F90      		pop __tmp_reg__
 265 0066 DF91      		pop r29
 266 0068 CF91      		pop r28
 267 006a 0895      		ret
 268               		.cfi_endproc
 269               	.LFE128:
 271               		.section	.text.send_mouse,"ax",@progbits
 273               	send_mouse:
 274               	.LFB127:
 682:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 275               		.loc 1 682 0
 276               		.cfi_startproc
 277               	.LVL25:
 278               	/* prologue: function */
 279               	/* frame size = 0 */
 280               	/* stack size = 0 */
 281               	.L__stack_usage = 0
 282               	.LBB141:
 283               	.LBB142:
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 284               		.loc 1 619 0
 285 0000 2091 0000 		lds r18,USB_DeviceState
 286               	.LBE142:
 287               	.LBE141:
 707:./tmk_core/protocol/lufa/lufa.c ****       return;
 288               		.loc 1 707 0
 289 0004 2430      		cpi r18,lo8(4)
 290 0006 01F4      		brne .L27
 291               	.LVL26:
 292               	.LBB143:
 293               	.LBB144:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 294               		.loc 2 270 0
 295 0008 22E0      		ldi r18,lo8(2)
 296 000a 2093 E900 		sts 233,r18
 297               	.LVL27:
 298 000e 2FEF      		ldi r18,lo8(-1)
 299               	.LVL28:
 300               	.L30:
 301               	.LBE144:
 302               	.LBE143:
 303               	.LBB145:
 304               	.LBB146:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305               		.loc 2 360 0
 306 0010 3091 E800 		lds r19,232
 307 0014 2150      		subi r18,lo8(-(-1))
 308               	.LVL29:
 309               	.LBE146:
 310               	.LBE145:
 715:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 311               		.loc 1 715 0
 312 0016 35FD      		sbrc r19,5
 313 0018 00C0      		rjmp .L31
 314               	.LVL30:
 315               	.LBB147:
 316               	.LBB148:
 317               		.loc 3 245 0
 318 001a 35ED      		ldi r19,lo8(-43)
 319 001c 3A95      	1:	dec r19
 320 001e 01F4      		brne 1b
 321 0020 0000      		nop
 322               	.LVL31:
 323               	.LBE148:
 324               	.LBE147:
 715:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 325               		.loc 1 715 0
 326 0022 2111      		cpse r18,__zero_reg__
 327 0024 00C0      		rjmp .L30
 328               	.LVL32:
 329               	.L31:
 330               	.LBB149:
 331               	.LBB150:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 332               		.loc 2 360 0
 333 0026 2091 E800 		lds r18,232
 334               	.LBE150:
 335               	.LBE149:
 716:./tmk_core/protocol/lufa/lufa.c **** 
 336               		.loc 1 716 0
 337 002a 25FF      		sbrs r18,5
 338 002c 00C0      		rjmp .L27
 719:./tmk_core/protocol/lufa/lufa.c **** 
 339               		.loc 1 719 0
 340 002e 40E0      		ldi r20,0
 341 0030 50E0      		ldi r21,0
 342 0032 65E0      		ldi r22,lo8(5)
 343 0034 70E0      		ldi r23,0
 344 0036 0E94 0000 		call Endpoint_Write_Stream_LE
 345               	.LVL33:
 346               	.LBB151:
 347               	.LBB152:
 348               		.loc 2 456 0
 349 003a 8091 E800 		lds r24,232
 350 003e 8E77      		andi r24,lo8(126)
 351 0040 8093 E800 		sts 232,r24
 352               	.LVL34:
 353               	.L27:
 354 0044 0895      		ret
 355               	.LBE152:
 356               	.LBE151:
 357               		.cfi_endproc
 358               	.LFE127:
 360               		.section	.text.send_keyboard,"ax",@progbits
 362               	send_keyboard:
 363               	.LFB126:
 627:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 364               		.loc 1 627 0
 365               		.cfi_startproc
 366               	.LVL35:
 367 0000 CF93      		push r28
 368               	.LCFI8:
 369               		.cfi_def_cfa_offset 3
 370               		.cfi_offset 28, -2
 371 0002 DF93      		push r29
 372               	.LCFI9:
 373               		.cfi_def_cfa_offset 4
 374               		.cfi_offset 29, -3
 375               	/* prologue: function */
 376               	/* frame size = 0 */
 377               	/* stack size = 2 */
 378               	.L__stack_usage = 2
 379 0004 EC01      		movw r28,r24
 380               	.LVL36:
 381               	.LBB153:
 382               	.LBB154:
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 383               		.loc 1 619 0
 384 0006 9091 0000 		lds r25,USB_DeviceState
 385               	.LBE154:
 386               	.LBE153:
 644:./tmk_core/protocol/lufa/lufa.c ****       return;
 387               		.loc 1 644 0
 388 000a 9430      		cpi r25,lo8(4)
 389 000c 01F0      		breq .+2
 390 000e 00C0      		rjmp .L40
 650:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 391               		.loc 1 650 0
 392 0010 8091 0000 		lds r24,keyboard_protocol
 393               	.LVL37:
 394 0014 8823      		tst r24
 395 0016 01F0      		breq .L43
 650:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 396               		.loc 1 650 0 is_stmt 0 discriminator 1
 397 0018 8091 0000 		lds r24,keymap_config
 398 001c 87FF      		sbrs r24,7
 399 001e 00C0      		rjmp .L43
 400               	.LVL38:
 401               	.LBB155:
 402               	.LBB156:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 403               		.loc 2 270 0 is_stmt 1
 404 0020 9093 E900 		sts 233,r25
 405               	.LVL39:
 406 0024 8FEF      		ldi r24,lo8(-1)
 407               	.LVL40:
 408               	.L44:
 409               	.LBE156:
 410               	.LBE155:
 411               	.LBB157:
 412               	.LBB158:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 413               		.loc 2 360 0
 414 0026 9091 E800 		lds r25,232
 415 002a 8150      		subi r24,lo8(-(-1))
 416               	.LVL41:
 417               	.LBE158:
 418               	.LBE157:
 655:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 419               		.loc 1 655 0
 420 002c 95FD      		sbrc r25,5
 421 002e 00C0      		rjmp .L45
 422               	.LVL42:
 423               	.LBB159:
 424               	.LBB160:
 425               		.loc 3 245 0
 426 0030 95E1      		ldi r25,lo8(21)
 427 0032 9A95      	1:	dec r25
 428 0034 01F4      		brne 1b
 429 0036 0000      		nop
 430               	.LVL43:
 431               	.LBE160:
 432               	.LBE159:
 655:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 433               		.loc 1 655 0
 434 0038 8111      		cpse r24,__zero_reg__
 435 003a 00C0      		rjmp .L44
 436               	.LVL44:
 437               	.L45:
 438               	.LBB161:
 439               	.LBB162:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 440               		.loc 2 360 0
 441 003c 8091 E800 		lds r24,232
 442               	.LBE162:
 443               	.LBE161:
 656:./tmk_core/protocol/lufa/lufa.c **** 
 444               		.loc 1 656 0
 445 0040 85FF      		sbrs r24,5
 446 0042 00C0      		rjmp .L40
 659:./tmk_core/protocol/lufa/lufa.c ****     }
 447               		.loc 1 659 0
 448 0044 40E0      		ldi r20,0
 449 0046 50E0      		ldi r21,0
 450 0048 60E2      		ldi r22,lo8(32)
 451 004a 70E0      		ldi r23,0
 452 004c 00C0      		rjmp .L70
 453               	.LVL45:
 454               	.L43:
 455               	.LBB163:
 456               	.LBB164:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 457               		.loc 2 270 0
 458 004e 81E0      		ldi r24,lo8(1)
 459 0050 8093 E900 		sts 233,r24
 460               	.LVL46:
 461 0054 8FEF      		ldi r24,lo8(-1)
 462               	.LVL47:
 463               	.L49:
 464               	.LBE164:
 465               	.LBE163:
 466               	.LBB165:
 467               	.LBB166:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 468               		.loc 2 360 0
 469 0056 9091 E800 		lds r25,232
 470 005a 8150      		subi r24,lo8(-(-1))
 471               	.LVL48:
 472               	.LBE166:
 473               	.LBE165:
 668:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 474               		.loc 1 668 0
 475 005c 95FD      		sbrc r25,5
 476 005e 00C0      		rjmp .L50
 477               	.LVL49:
 478               	.LBB167:
 479               	.LBB168:
 480               		.loc 3 245 0
 481 0060 95ED      		ldi r25,lo8(-43)
 482 0062 9A95      	1:	dec r25
 483 0064 01F4      		brne 1b
 484 0066 0000      		nop
 485               	.LVL50:
 486               	.LBE168:
 487               	.LBE167:
 668:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 488               		.loc 1 668 0
 489 0068 8111      		cpse r24,__zero_reg__
 490 006a 00C0      		rjmp .L49
 491               	.LVL51:
 492               	.L50:
 493               	.LBB169:
 494               	.LBB170:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 495               		.loc 2 360 0
 496 006c 8091 E800 		lds r24,232
 497               	.LBE170:
 498               	.LBE169:
 669:./tmk_core/protocol/lufa/lufa.c **** 
 499               		.loc 1 669 0
 500 0070 85FF      		sbrs r24,5
 501 0072 00C0      		rjmp .L40
 672:./tmk_core/protocol/lufa/lufa.c ****     }
 502               		.loc 1 672 0
 503 0074 40E0      		ldi r20,0
 504 0076 50E0      		ldi r21,0
 505 0078 68E0      		ldi r22,lo8(8)
 506 007a 70E0      		ldi r23,0
 507               	.LVL52:
 508               	.L70:
 509 007c CE01      		movw r24,r28
 510 007e 0E94 0000 		call Endpoint_Write_Stream_LE
 511               	.LVL53:
 512               	.LBB171:
 513               	.LBB172:
 514               		.loc 2 456 0
 515 0082 8091 E800 		lds r24,232
 516 0086 8E77      		andi r24,lo8(126)
 517 0088 8093 E800 		sts 232,r24
 518               	.LBE172:
 519               	.LBE171:
 678:./tmk_core/protocol/lufa/lufa.c **** }
 520               		.loc 1 678 0
 521 008c 80E2      		ldi r24,lo8(32)
 522 008e FE01      		movw r30,r28
 523 0090 A0E0      		ldi r26,lo8(keyboard_report_sent)
 524 0092 B0E0      		ldi r27,hi8(keyboard_report_sent)
 525               		0:
 526 0094 0190      		ld r0,Z+
 527 0096 0D92      		st X+,r0
 528 0098 8A95      		dec r24
 529 009a 01F4      		brne 0b
 530               	.L40:
 531               	/* epilogue start */
 679:./tmk_core/protocol/lufa/lufa.c **** 
 532               		.loc 1 679 0
 533 009c DF91      		pop r29
 534 009e CF91      		pop r28
 535               	.LVL54:
 536 00a0 0895      		ret
 537               		.cfi_endproc
 538               	.LFE126:
 540               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 541               	.global	EVENT_USB_Device_Connect
 543               	EVENT_USB_Device_Connect:
 544               	.LFB117:
 330:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 545               		.loc 1 330 0
 546               		.cfi_startproc
 547               	/* prologue: function */
 548               	/* frame size = 0 */
 549               	/* stack size = 0 */
 550               	.L__stack_usage = 0
 333:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 551               		.loc 1 333 0
 552 0000 8091 0000 		lds r24,USB_IsInitialized
 553 0004 8111      		cpse r24,__zero_reg__
 554 0006 00C0      		rjmp .L71
 334:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 555               		.loc 1 334 0
 556 0008 0E94 0000 		call USB_Disable
 557               	.LVL55:
 335:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 558               		.loc 1 335 0
 559 000c 0E94 0000 		call USB_Init
 560               	.LVL56:
 561               	.LBB173:
 562               	.LBB174:
 563               	.LBB175:
 564               		.file 4 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 565               		.loc 4 113 0
 566 0010 8091 E200 		lds r24,226
 567 0014 8460      		ori r24,lo8(4)
 568 0016 8093 E200 		sts 226,r24
 569               	.LVL57:
 570               	.L71:
 571 001a 0895      		ret
 572               	.LBE175:
 573               	.LBE174:
 574               	.LBE173:
 575               		.cfi_endproc
 576               	.LFE117:
 578               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 579               	.global	EVENT_USB_Device_Disconnect
 581               	EVENT_USB_Device_Disconnect:
 582               	.LFB118:
 341:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 583               		.loc 1 341 0
 584               		.cfi_startproc
 585               	/* prologue: function */
 586               	/* frame size = 0 */
 587               	/* stack size = 0 */
 588               	.L__stack_usage = 0
 344:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 589               		.loc 1 344 0
 590 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 591 0004 0895      		ret
 592               		.cfi_endproc
 593               	.LFE118:
 595               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 596               	.global	EVENT_USB_Device_Reset
 598               	EVENT_USB_Device_Reset:
 599               	.LFB119:
 355:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 600               		.loc 1 355 0
 601               		.cfi_startproc
 602               	/* prologue: function */
 603               	/* frame size = 0 */
 604               	/* stack size = 0 */
 605               	.L__stack_usage = 0
 606 0000 0895      		ret
 607               		.cfi_endproc
 608               	.LFE119:
 610               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 611               	.global	EVENT_USB_Device_Suspend
 613               	EVENT_USB_Device_Suspend:
 614               	.LFB120:
 360:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 615               		.loc 1 360 0
 616               		.cfi_startproc
 617               	/* prologue: function */
 618               	/* frame size = 0 */
 619               	/* stack size = 0 */
 620               	.L__stack_usage = 0
 621 0000 0895      		ret
 622               		.cfi_endproc
 623               	.LFE120:
 625               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 626               	.global	EVENT_USB_Device_WakeUp
 628               	EVENT_USB_Device_WakeUp:
 629               	.LFB121:
 368:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 630               		.loc 1 368 0
 631               		.cfi_startproc
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 370:./tmk_core/protocol/lufa/lufa.c **** 
 636               		.loc 1 370 0
 637 0000 0C94 0000 		jmp suspend_wakeup_init
 638               	.LVL58:
 639               		.cfi_endproc
 640               	.LFE121:
 642               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 643               	.global	EVENT_USB_Device_ConfigurationChanged
 645               	EVENT_USB_Device_ConfigurationChanged:
 646               	.LFB122:
 410:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 647               		.loc 1 410 0
 648               		.cfi_startproc
 649               	/* prologue: function */
 650               	/* frame size = 0 */
 651               	/* stack size = 0 */
 652               	.L__stack_usage = 0
 653               	.LVL59:
 654               	.LBB176:
 655               	.LBB177:
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 656               		.loc 2 210 0
 657 0000 42E0      		ldi r20,lo8(2)
 658 0002 61EC      		ldi r22,lo8(-63)
 659 0004 81E0      		ldi r24,lo8(1)
 660 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 661               	.LVL60:
 662               	.LBE177:
 663               	.LBE176:
 664               	.LBB178:
 665               	.LBB179:
 666 000a 42E0      		ldi r20,lo8(2)
 667 000c 61EC      		ldi r22,lo8(-63)
 668 000e 82E0      		ldi r24,lo8(2)
 669 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 670               	.LVL61:
 671               	.LBE179:
 672               	.LBE178:
 673               	.LBB180:
 674               	.LBB181:
 675 0014 42E0      		ldi r20,lo8(2)
 676 0016 61EC      		ldi r22,lo8(-63)
 677 0018 83E0      		ldi r24,lo8(3)
 678 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 679               	.LVL62:
 680               	.LBE181:
 681               	.LBE180:
 682               	.LBB182:
 683               	.LBB183:
 684 001e 42E2      		ldi r20,lo8(34)
 685 0020 61EC      		ldi r22,lo8(-63)
 686 0022 84E0      		ldi r24,lo8(4)
 687 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 688               	.LVL63:
 689               	.LBE183:
 690               	.LBE182:
 691               		.cfi_endproc
 692               	.LFE122:
 694               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 695               	.global	EVENT_USB_Device_ControlRequest
 697               	EVENT_USB_Device_ControlRequest:
 698               	.LFB123:
 482:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 699               		.loc 1 482 0
 700               		.cfi_startproc
 701               	/* prologue: function */
 702               	/* frame size = 0 */
 703               	/* stack size = 0 */
 704               	.L__stack_usage = 0
 705               	.LVL64:
 487:./tmk_core/protocol/lufa/lufa.c ****     {
 706               		.loc 1 487 0
 707 0000 8091 0000 		lds r24,USB_ControlRequest+1
 708 0004 8330      		cpi r24,lo8(3)
 709 0006 01F4      		brne .+2
 710 0008 00C0      		rjmp .L80
 711 000a 00F4      		brsh .L81
 712 000c 8130      		cpi r24,lo8(1)
 713 000e 01F0      		breq .L82
 714 0010 8230      		cpi r24,lo8(2)
 715 0012 01F4      		brne .+2
 716 0014 00C0      		rjmp .L83
 717 0016 0895      		ret
 718               	.L81:
 719 0018 8A30      		cpi r24,lo8(10)
 720 001a 01F4      		brne .+2
 721 001c 00C0      		rjmp .L84
 722 001e 8B30      		cpi r24,lo8(11)
 723 0020 01F4      		brne .+2
 724 0022 00C0      		rjmp .L85
 725 0024 8930      		cpi r24,lo8(9)
 726 0026 01F0      		breq .+2
 727 0028 00C0      		rjmp .L78
 728 002a 00C0      		rjmp .L113
 729               	.L82:
 490:./tmk_core/protocol/lufa/lufa.c ****             {
 730               		.loc 1 490 0
 731 002c 8091 0000 		lds r24,USB_ControlRequest
 732 0030 813A      		cpi r24,lo8(-95)
 733 0032 01F0      		breq .+2
 734 0034 00C0      		rjmp .L78
 735               	.LBB184:
 736               	.LBB185:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 737               		.loc 2 444 0
 738 0036 8091 E800 		lds r24,232
 739 003a 877F      		andi r24,lo8(-9)
 740 003c 8093 E800 		sts 232,r24
 741               	.LBE185:
 742               	.LBE184:
 495:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 743               		.loc 1 495 0
 744 0040 8091 0000 		lds r24,USB_ControlRequest+4
 745 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 746 0048 892B      		or r24,r25
 747 004a 01F4      		brne .L110
 499:./tmk_core/protocol/lufa/lufa.c ****                     break;
 748               		.loc 1 499 0
 749 004c 60E2      		ldi r22,lo8(32)
 498:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 750               		.loc 1 498 0
 751 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 752 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 753 0052 00C0      		rjmp .L88
 754               	.L110:
 484:./tmk_core/protocol/lufa/lufa.c **** 
 755               		.loc 1 484 0
 756 0054 60E0      		ldi r22,0
 483:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 757               		.loc 1 483 0
 758 0056 80E0      		ldi r24,0
 759 0058 90E0      		ldi r25,0
 760               	.L88:
 761               	.LVL65:
 504:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 762               		.loc 1 504 0
 763 005a 70E0      		ldi r23,0
 764 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 765               	.LVL66:
 766               	.LBB186:
 767               	.LBB187:
 457:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 768               		.loc 2 471 0
 769 0060 8091 E800 		lds r24,232
 770 0064 8B77      		andi r24,lo8(123)
 771 0066 8093 E800 		sts 232,r24
 772 006a 0895      		ret
 773               	.LVL67:
 774               	.L113:
 775               	.LBE187:
 776               	.LBE186:
 510:./tmk_core/protocol/lufa/lufa.c ****             {
 777               		.loc 1 510 0
 778 006c 8091 0000 		lds r24,USB_ControlRequest
 779 0070 8132      		cpi r24,lo8(33)
 780 0072 01F0      		breq .+2
 781 0074 00C0      		rjmp .L78
 514:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 782               		.loc 1 514 0
 783 0076 8091 0000 		lds r24,USB_ControlRequest+4
 784 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 785 007e 0097      		sbiw r24,0
 786 0080 01F0      		breq .L91
 787 0082 0397      		sbiw r24,3
 788 0084 01F0      		breq .+2
 789 0086 00C0      		rjmp .L78
 790               	.L91:
 791               	.LBB188:
 792               	.LBB189:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 793               		.loc 2 444 0
 794 0088 8091 E800 		lds r24,232
 795 008c 877F      		andi r24,lo8(-9)
 796 008e 8093 E800 		sts 232,r24
 797               	.L92:
 798               	.LBE189:
 799               	.LBE188:
 800               	.LBB190:
 801               	.LBB191:
 419:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 802               		.loc 2 419 0
 803 0092 8091 E800 		lds r24,232
 804               	.LBE191:
 805               	.LBE190:
 521:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 806               		.loc 1 521 0
 807 0096 82FD      		sbrc r24,2
 808 0098 00C0      		rjmp .L114
 522:./tmk_core/protocol/lufa/lufa.c ****                           return;
 809               		.loc 1 522 0
 810 009a 8091 0000 		lds r24,USB_DeviceState
 811 009e 8111      		cpse r24,__zero_reg__
 812 00a0 00C0      		rjmp .L92
 813 00a2 00C0      		rjmp .L78
 814               	.L114:
 815               	.LBB192:
 816               	.LBB193:
 472:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 817               		.loc 2 542 0
 818 00a4 8091 F100 		lds r24,241
 819               	.LBE193:
 820               	.LBE192:
 525:./tmk_core/protocol/lufa/lufa.c **** 
 821               		.loc 1 525 0
 822 00a8 8093 0000 		sts keyboard_led_stats,r24
 823               	.LBB194:
 824               	.LBB195:
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 825               		.loc 2 471 0
 826 00ac 8091 E800 		lds r24,232
 827 00b0 8B77      		andi r24,lo8(123)
 828 00b2 00C0      		rjmp .L111
 829               	.L80:
 830               	.LBE195:
 831               	.LBE194:
 537:./tmk_core/protocol/lufa/lufa.c ****             {
 832               		.loc 1 537 0
 833 00b4 8091 0000 		lds r24,USB_ControlRequest
 834 00b8 813A      		cpi r24,lo8(-95)
 835 00ba 01F0      		breq .+2
 836 00bc 00C0      		rjmp .L78
 539:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 837               		.loc 1 539 0
 838 00be 8091 0000 		lds r24,USB_ControlRequest+4
 839 00c2 9091 0000 		lds r25,USB_ControlRequest+4+1
 840 00c6 892B      		or r24,r25
 841 00c8 01F0      		breq .+2
 842 00ca 00C0      		rjmp .L78
 843               	.LBB196:
 844               	.LBB197:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 845               		.loc 2 444 0
 846 00cc 8091 E800 		lds r24,232
 847 00d0 877F      		andi r24,lo8(-9)
 848 00d2 8093 E800 		sts 232,r24
 849               	.L94:
 850               	.LBE197:
 851               	.LBE196:
 852               	.LBB198:
 853               	.LBB199:
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 854               		.loc 2 407 0 discriminator 1
 855 00d6 8091 E800 		lds r24,232
 856               	.LBE199:
 857               	.LBE198:
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 858               		.loc 1 541 0 discriminator 1
 859 00da 80FF      		sbrs r24,0
 860 00dc 00C0      		rjmp .L94
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 861               		.loc 1 542 0
 862 00de 8091 0000 		lds r24,keyboard_protocol
 863               	.LVL68:
 864 00e2 00C0      		rjmp .L112
 865               	.LVL69:
 866               	.L85:
 550:./tmk_core/protocol/lufa/lufa.c ****             {
 867               		.loc 1 550 0
 868 00e4 8091 0000 		lds r24,USB_ControlRequest
 869 00e8 8132      		cpi r24,lo8(33)
 870 00ea 01F4      		brne .L78
 552:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 871               		.loc 1 552 0
 872 00ec 8091 0000 		lds r24,USB_ControlRequest+4
 873 00f0 9091 0000 		lds r25,USB_ControlRequest+4+1
 874 00f4 892B      		or r24,r25
 875 00f6 01F4      		brne .L78
 876               	.LBB200:
 877               	.LBB201:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 878               		.loc 2 444 0
 879 00f8 8091 E800 		lds r24,232
 880 00fc 877F      		andi r24,lo8(-9)
 881 00fe 8093 E800 		sts 232,r24
 882               	.LBE201:
 883               	.LBE200:
 554:./tmk_core/protocol/lufa/lufa.c **** 
 884               		.loc 1 554 0
 885 0102 0E94 0000 		call Endpoint_ClearStatusStage
 886               	.LVL70:
 556:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 887               		.loc 1 556 0
 888 0106 8091 0000 		lds r24,USB_ControlRequest+2
 889 010a 8093 0000 		sts keyboard_protocol,r24
 557:./tmk_core/protocol/lufa/lufa.c ****                 }
 890               		.loc 1 557 0
 891 010e 0C94 0000 		jmp clear_keyboard
 892               	.LVL71:
 893               	.L84:
 563:./tmk_core/protocol/lufa/lufa.c ****             {
 894               		.loc 1 563 0
 895 0112 8091 0000 		lds r24,USB_ControlRequest
 896 0116 8132      		cpi r24,lo8(33)
 897 0118 01F4      		brne .L78
 898               	.LBB202:
 899               	.LBB203:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 900               		.loc 2 444 0
 901 011a 8091 E800 		lds r24,232
 902 011e 877F      		andi r24,lo8(-9)
 903 0120 8093 E800 		sts 232,r24
 904               	.LBE203:
 905               	.LBE202:
 566:./tmk_core/protocol/lufa/lufa.c **** 
 906               		.loc 1 566 0
 907 0124 0E94 0000 		call Endpoint_ClearStatusStage
 908               	.LVL72:
 568:./tmk_core/protocol/lufa/lufa.c ****             }
 909               		.loc 1 568 0
 910 0128 8091 0000 		lds r24,USB_ControlRequest+3
 911 012c 8093 0000 		sts keyboard_idle,r24
 912 0130 0895      		ret
 913               	.L83:
 573:./tmk_core/protocol/lufa/lufa.c ****             {
 914               		.loc 1 573 0
 915 0132 8091 0000 		lds r24,USB_ControlRequest
 916 0136 813A      		cpi r24,lo8(-95)
 917 0138 01F4      		brne .L78
 918               	.LBB204:
 919               	.LBB205:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 920               		.loc 2 444 0
 921 013a 8091 E800 		lds r24,232
 922 013e 877F      		andi r24,lo8(-9)
 923 0140 8093 E800 		sts 232,r24
 924               	.L95:
 925               	.LBE205:
 926               	.LBE204:
 927               	.LBB206:
 928               	.LBB207:
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 929               		.loc 2 407 0 discriminator 1
 930 0144 8091 E800 		lds r24,232
 931               	.LBE207:
 932               	.LBE206:
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 933               		.loc 1 576 0 discriminator 1
 934 0148 80FF      		sbrs r24,0
 935 014a 00C0      		rjmp .L95
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 936               		.loc 1 577 0
 937 014c 8091 0000 		lds r24,keyboard_idle
 938               	.L112:
 939               	.LVL73:
 940               	.LBB208:
 941               	.LBB209:
 543:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 942               		.loc 2 554 0
 943 0150 8093 F100 		sts 241,r24
 944               	.LBE209:
 945               	.LBE208:
 946               	.LBB210:
 947               	.LBB211:
 456:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 948               		.loc 2 456 0
 949 0154 8091 E800 		lds r24,232
 950               	.LVL74:
 951 0158 8E77      		andi r24,lo8(126)
 952               	.LVL75:
 953               	.L111:
 954 015a 8093 E800 		sts 232,r24
 955               	.LBE211:
 956               	.LBE210:
 579:./tmk_core/protocol/lufa/lufa.c ****             }
 957               		.loc 1 579 0
 958 015e 0C94 0000 		jmp Endpoint_ClearStatusStage
 959               	.LVL76:
 960               	.L78:
 961 0162 0895      		ret
 962               		.cfi_endproc
 963               	.LFE123:
 965               		.section	.text.sendchar,"ax",@progbits
 966               	.global	sendchar
 968               	sendchar:
 969               	.LFB130:
 791:./tmk_core/protocol/lufa/lufa.c **** 
 792:./tmk_core/protocol/lufa/lufa.c **** 
 793:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 794:./tmk_core/protocol/lufa/lufa.c ****  * sendchar
 795:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 796:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 797:./tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 798:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 799:./tmk_core/protocol/lufa/lufa.c **** {
 800:./tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 801:./tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 802:./tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 803:./tmk_core/protocol/lufa/lufa.c **** 
 804:./tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 805:./tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 806:./tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 807:./tmk_core/protocol/lufa/lufa.c **** 
 808:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 809:./tmk_core/protocol/lufa/lufa.c ****         return -1;
 810:./tmk_core/protocol/lufa/lufa.c **** 
 811:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 812:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 813:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 814:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 815:./tmk_core/protocol/lufa/lufa.c ****     }
 816:./tmk_core/protocol/lufa/lufa.c **** 
 817:./tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 818:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 819:./tmk_core/protocol/lufa/lufa.c ****     }
 820:./tmk_core/protocol/lufa/lufa.c **** 
 821:./tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 822:./tmk_core/protocol/lufa/lufa.c **** 
 823:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 824:./tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 825:./tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 826:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 827:./tmk_core/protocol/lufa/lufa.c ****         }
 828:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 829:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 830:./tmk_core/protocol/lufa/lufa.c ****         }
 831:./tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 832:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 833:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 834:./tmk_core/protocol/lufa/lufa.c ****         }
 835:./tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 836:./tmk_core/protocol/lufa/lufa.c ****     }
 837:./tmk_core/protocol/lufa/lufa.c **** 
 838:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 839:./tmk_core/protocol/lufa/lufa.c **** 
 840:./tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 841:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 842:./tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 843:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 844:./tmk_core/protocol/lufa/lufa.c ****     } else {
 845:./tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 846:./tmk_core/protocol/lufa/lufa.c ****     }
 847:./tmk_core/protocol/lufa/lufa.c **** 
 848:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 849:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 850:./tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 851:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 852:./tmk_core/protocol/lufa/lufa.c ****     return -1;
 853:./tmk_core/protocol/lufa/lufa.c **** }
 854:./tmk_core/protocol/lufa/lufa.c **** #else
 855:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 856:./tmk_core/protocol/lufa/lufa.c **** {
 970               		.loc 1 856 0
 971               		.cfi_startproc
 972               	.LVL77:
 973               	/* prologue: function */
 974               	/* frame size = 0 */
 975               	/* stack size = 0 */
 976               	.L__stack_usage = 0
 857:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 858:./tmk_core/protocol/lufa/lufa.c **** }
 977               		.loc 1 858 0
 978 0000 80E0      		ldi r24,0
 979               	.LVL78:
 980 0002 0895      		ret
 981               		.cfi_endproc
 982               	.LFE130:
 984               		.section	.text.startup.main,"ax",@progbits
 985               		.weak	main
 987               	main:
 988               	.LFB133:
 859:./tmk_core/protocol/lufa/lufa.c **** #endif
 860:./tmk_core/protocol/lufa/lufa.c **** 
 861:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 862:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 863:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 864:./tmk_core/protocol/lufa/lufa.c **** 
 865:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 866:./tmk_core/protocol/lufa/lufa.c **** static void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t 
 867:./tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 868:./tmk_core/protocol/lufa/lufa.c ****   event.Data1 = byte0;
 869:./tmk_core/protocol/lufa/lufa.c ****   event.Data2 = byte1;
 870:./tmk_core/protocol/lufa/lufa.c ****   event.Data3 = byte2;
 871:./tmk_core/protocol/lufa/lufa.c **** 
 872:./tmk_core/protocol/lufa/lufa.c ****   uint8_t cable = 0;
 873:./tmk_core/protocol/lufa/lufa.c **** 
 874:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPNUM);
 875:./tmk_core/protocol/lufa/lufa.c **** 
 876:./tmk_core/protocol/lufa/lufa.c ****   //if the length is undefined we assume it is a SYSEX message
 877:./tmk_core/protocol/lufa/lufa.c ****   if (midi_packet_length(byte0) == UNDEFINED) {
 878:./tmk_core/protocol/lufa/lufa.c ****     switch(cnt) {
 879:./tmk_core/protocol/lufa/lufa.c ****       case 3:
 880:./tmk_core/protocol/lufa/lufa.c ****         if (byte2 == SYSEX_END)
 881:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_3);
 882:./tmk_core/protocol/lufa/lufa.c ****         else
 883:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 884:./tmk_core/protocol/lufa/lufa.c ****         break;
 885:./tmk_core/protocol/lufa/lufa.c ****       case 2:
 886:./tmk_core/protocol/lufa/lufa.c ****         if (byte1 == SYSEX_END)
 887:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_2);
 888:./tmk_core/protocol/lufa/lufa.c ****         else
 889:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 890:./tmk_core/protocol/lufa/lufa.c ****         break;
 891:./tmk_core/protocol/lufa/lufa.c ****       case 1:
 892:./tmk_core/protocol/lufa/lufa.c ****         if (byte0 == SYSEX_END)
 893:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_1);
 894:./tmk_core/protocol/lufa/lufa.c ****         else
 895:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 896:./tmk_core/protocol/lufa/lufa.c ****         break;
 897:./tmk_core/protocol/lufa/lufa.c ****       default:
 898:./tmk_core/protocol/lufa/lufa.c ****         return; //invalid cnt
 899:./tmk_core/protocol/lufa/lufa.c ****     }
 900:./tmk_core/protocol/lufa/lufa.c ****   } else {
 901:./tmk_core/protocol/lufa/lufa.c ****     //deal with 'system common' messages
 902:./tmk_core/protocol/lufa/lufa.c ****     //TODO are there any more?
 903:./tmk_core/protocol/lufa/lufa.c ****     switch(byte0 & 0xF0){
 904:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGPOSITION:
 905:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_3);
 906:./tmk_core/protocol/lufa/lufa.c ****         break;
 907:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGSELECT:
 908:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_TC_QUARTERFRAME:
 909:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_2);
 910:./tmk_core/protocol/lufa/lufa.c ****         break;
 911:./tmk_core/protocol/lufa/lufa.c ****       default:
 912:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, byte0);
 913:./tmk_core/protocol/lufa/lufa.c ****         break;
 914:./tmk_core/protocol/lufa/lufa.c ****     }
 915:./tmk_core/protocol/lufa/lufa.c ****   }
 916:./tmk_core/protocol/lufa/lufa.c **** 
 917:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_Write_Stream_LE(&event, sizeof(event), NULL);
 918:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_ClearIN();
 919:./tmk_core/protocol/lufa/lufa.c **** 
 920:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, &event);
 921:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_Flush(&USB_MIDI_Interface);
 922:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 923:./tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 924:./tmk_core/protocol/lufa/lufa.c **** }
 925:./tmk_core/protocol/lufa/lufa.c **** 
 926:./tmk_core/protocol/lufa/lufa.c **** static void usb_get_midi(MidiDevice * device) {
 927:./tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 928:./tmk_core/protocol/lufa/lufa.c ****   while (MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, &event)) {
 929:./tmk_core/protocol/lufa/lufa.c **** 
 930:./tmk_core/protocol/lufa/lufa.c ****     midi_packet_length_t length = midi_packet_length(event.Data1);
 931:./tmk_core/protocol/lufa/lufa.c ****     uint8_t input[3];
 932:./tmk_core/protocol/lufa/lufa.c ****     input[0] = event.Data1;
 933:./tmk_core/protocol/lufa/lufa.c ****     input[1] = event.Data2;
 934:./tmk_core/protocol/lufa/lufa.c ****     input[2] = event.Data3;
 935:./tmk_core/protocol/lufa/lufa.c ****     if (length == UNDEFINED) {
 936:./tmk_core/protocol/lufa/lufa.c ****       //sysex
 937:./tmk_core/protocol/lufa/lufa.c ****       if (event.Event == MIDI_EVENT(0, SYSEX_START_OR_CONT) || event.Event == MIDI_EVENT(0, SYSEX_E
 938:./tmk_core/protocol/lufa/lufa.c ****         length = 3;
 939:./tmk_core/protocol/lufa/lufa.c ****       } else if (event.Event == MIDI_EVENT(0, SYSEX_ENDS_IN_2)) {
 940:./tmk_core/protocol/lufa/lufa.c ****         length = 2;
 941:./tmk_core/protocol/lufa/lufa.c ****       } else if(event.Event ==  MIDI_EVENT(0, SYSEX_ENDS_IN_1)) {
 942:./tmk_core/protocol/lufa/lufa.c ****         length = 1;
 943:./tmk_core/protocol/lufa/lufa.c ****       } else {
 944:./tmk_core/protocol/lufa/lufa.c ****         //XXX what to do?
 945:./tmk_core/protocol/lufa/lufa.c ****       }
 946:./tmk_core/protocol/lufa/lufa.c ****     }
 947:./tmk_core/protocol/lufa/lufa.c **** 
 948:./tmk_core/protocol/lufa/lufa.c ****     //pass the data to the device input function
 949:./tmk_core/protocol/lufa/lufa.c ****     if (length != UNDEFINED)
 950:./tmk_core/protocol/lufa/lufa.c ****       midi_device_input(device, length, input);
 951:./tmk_core/protocol/lufa/lufa.c ****   }
 952:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 953:./tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 954:./tmk_core/protocol/lufa/lufa.c **** }
 955:./tmk_core/protocol/lufa/lufa.c **** 
 956:./tmk_core/protocol/lufa/lufa.c **** static void midi_usb_init(MidiDevice * device){
 957:./tmk_core/protocol/lufa/lufa.c ****   midi_device_init(device);
 958:./tmk_core/protocol/lufa/lufa.c ****   midi_device_set_send_func(device, usb_send_func);
 959:./tmk_core/protocol/lufa/lufa.c ****   midi_device_set_pre_input_process_func(device, usb_get_midi);
 960:./tmk_core/protocol/lufa/lufa.c **** 
 961:./tmk_core/protocol/lufa/lufa.c ****   // SetupHardware();
 962:./tmk_core/protocol/lufa/lufa.c ****   sei();
 963:./tmk_core/protocol/lufa/lufa.c **** }
 964:./tmk_core/protocol/lufa/lufa.c **** 
 965:./tmk_core/protocol/lufa/lufa.c **** void MIDI_Task(void)
 966:./tmk_core/protocol/lufa/lufa.c **** {
 967:./tmk_core/protocol/lufa/lufa.c **** 
 968:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 969:./tmk_core/protocol/lufa/lufa.c ****     dprint("in MIDI_TASK\n");
 970:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 971:./tmk_core/protocol/lufa/lufa.c ****       return;
 972:./tmk_core/protocol/lufa/lufa.c ****     dprint("continuing in MIDI_TASK\n");
 973:./tmk_core/protocol/lufa/lufa.c **** 
 974:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);
 975:./tmk_core/protocol/lufa/lufa.c **** 
 976:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady())
 977:./tmk_core/protocol/lufa/lufa.c ****     {
 978:./tmk_core/protocol/lufa/lufa.c **** 
 979:./tmk_core/protocol/lufa/lufa.c ****         dprint("Endpoint is ready\n");
 980:./tmk_core/protocol/lufa/lufa.c **** 
 981:./tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDICommand = 0;
 982:./tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDIPitch;
 983:./tmk_core/protocol/lufa/lufa.c **** 
 984:./tmk_core/protocol/lufa/lufa.c ****         /* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 
 985:./tmk_core/protocol/lufa/lufa.c ****         uint8_t Channel = MIDI_CHANNEL(1);
 986:./tmk_core/protocol/lufa/lufa.c **** 
 987:./tmk_core/protocol/lufa/lufa.c ****         MIDICommand = MIDI_COMMAND_NOTE_ON;
 988:./tmk_core/protocol/lufa/lufa.c ****         MIDIPitch   = 0x3E;
 989:./tmk_core/protocol/lufa/lufa.c **** 
 990:./tmk_core/protocol/lufa/lufa.c ****         /* Check if a MIDI command is to be sent */
 991:./tmk_core/protocol/lufa/lufa.c ****         if (MIDICommand)
 992:./tmk_core/protocol/lufa/lufa.c ****         {
 993:./tmk_core/protocol/lufa/lufa.c ****             dprint("Command exists\n");
 994:./tmk_core/protocol/lufa/lufa.c ****             MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 995:./tmk_core/protocol/lufa/lufa.c ****                 {
 996:./tmk_core/protocol/lufa/lufa.c ****                     .Event       = MIDI_EVENT(0, MIDICommand),
 997:./tmk_core/protocol/lufa/lufa.c **** 
 998:./tmk_core/protocol/lufa/lufa.c ****                     .Data1       = MIDICommand | Channel,
 999:./tmk_core/protocol/lufa/lufa.c ****                     .Data2       = MIDIPitch,
1000:./tmk_core/protocol/lufa/lufa.c ****                     .Data3       = MIDI_STANDARD_VELOCITY,
1001:./tmk_core/protocol/lufa/lufa.c ****                 };
1002:./tmk_core/protocol/lufa/lufa.c **** 
1003:./tmk_core/protocol/lufa/lufa.c ****             /* Write the MIDI event packet to the endpoint */
1004:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
1005:./tmk_core/protocol/lufa/lufa.c **** 
1006:./tmk_core/protocol/lufa/lufa.c ****             /* Send the data in the endpoint to the host */
1007:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearIN();
1008:./tmk_core/protocol/lufa/lufa.c ****         }
1009:./tmk_core/protocol/lufa/lufa.c ****     }
1010:./tmk_core/protocol/lufa/lufa.c **** 
1011:./tmk_core/protocol/lufa/lufa.c **** 
1012:./tmk_core/protocol/lufa/lufa.c ****     /* Select the MIDI OUT stream */
1013:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPADDR);
1014:./tmk_core/protocol/lufa/lufa.c **** 
1015:./tmk_core/protocol/lufa/lufa.c ****     /* Check if a MIDI command has been received */
1016:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
1017:./tmk_core/protocol/lufa/lufa.c ****     {
1018:./tmk_core/protocol/lufa/lufa.c ****         MIDI_EventPacket_t MIDIEvent;
1019:./tmk_core/protocol/lufa/lufa.c **** 
1020:./tmk_core/protocol/lufa/lufa.c ****         /* Read the MIDI event packet from the endpoint */
1021:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
1022:./tmk_core/protocol/lufa/lufa.c **** 
1023:./tmk_core/protocol/lufa/lufa.c ****         /* If the endpoint is now empty, clear the bank */
1024:./tmk_core/protocol/lufa/lufa.c ****         if (!(Endpoint_BytesInEndpoint()))
1025:./tmk_core/protocol/lufa/lufa.c ****         {
1026:./tmk_core/protocol/lufa/lufa.c ****             /* Clear the endpoint ready for new packet */
1027:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearOUT();
1028:./tmk_core/protocol/lufa/lufa.c ****         }
1029:./tmk_core/protocol/lufa/lufa.c ****     }
1030:./tmk_core/protocol/lufa/lufa.c **** }
1031:./tmk_core/protocol/lufa/lufa.c **** 
1032:./tmk_core/protocol/lufa/lufa.c **** #endif
1033:./tmk_core/protocol/lufa/lufa.c **** 
1034:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
1035:./tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
1036:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
1037:./tmk_core/protocol/lufa/lufa.c **** 
1038:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1039:./tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
1040:./tmk_core/protocol/lufa/lufa.c **** {
1041:./tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
1042:./tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
1043:./tmk_core/protocol/lufa/lufa.c **** }
1044:./tmk_core/protocol/lufa/lufa.c **** 
1045:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
1046:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
1047:./tmk_core/protocol/lufa/lufa.c **** {
1048:./tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
1049:./tmk_core/protocol/lufa/lufa.c **** }
1050:./tmk_core/protocol/lufa/lufa.c **** 
1051:./tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
1052:./tmk_core/protocol/lufa/lufa.c **** {
1053:./tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
1054:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
1055:./tmk_core/protocol/lufa/lufa.c ****   if (count)
1056:./tmk_core/protocol/lufa/lufa.c ****   {
1057:./tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
1058:./tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
1059:./tmk_core/protocol/lufa/lufa.c ****   }
1060:./tmk_core/protocol/lufa/lufa.c **** }
1061:./tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
1062:./tmk_core/protocol/lufa/lufa.c **** {
1063:./tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
1064:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
1065:./tmk_core/protocol/lufa/lufa.c **** 
1066:./tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
1067:./tmk_core/protocol/lufa/lufa.c ****   {
1068:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
1069:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
1070:./tmk_core/protocol/lufa/lufa.c **** 
1071:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
1072:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
1073:./tmk_core/protocol/lufa/lufa.c ****         return;
1074:./tmk_core/protocol/lufa/lufa.c ****     }
1075:./tmk_core/protocol/lufa/lufa.c **** 
1076:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
1077:./tmk_core/protocol/lufa/lufa.c **** 
1078:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
1079:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
1080:./tmk_core/protocol/lufa/lufa.c **** 
1081:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
1082:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
1083:./tmk_core/protocol/lufa/lufa.c ****     }
1084:./tmk_core/protocol/lufa/lufa.c **** 
1085:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
1086:./tmk_core/protocol/lufa/lufa.c ****   }
1087:./tmk_core/protocol/lufa/lufa.c **** }
1088:./tmk_core/protocol/lufa/lufa.c **** #endif
1089:./tmk_core/protocol/lufa/lufa.c **** 
1090:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
1091:./tmk_core/protocol/lufa/lufa.c ****  * main
1092:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
1093:./tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
1094:./tmk_core/protocol/lufa/lufa.c **** {
1095:./tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
1096:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
1097:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
1098:./tmk_core/protocol/lufa/lufa.c **** 
1099:./tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
1100:./tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
1101:./tmk_core/protocol/lufa/lufa.c **** 
1102:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
1103:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
1104:./tmk_core/protocol/lufa/lufa.c **** }
1105:./tmk_core/protocol/lufa/lufa.c **** 
1106:./tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1107:./tmk_core/protocol/lufa/lufa.c **** {
1108:./tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1109:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1110:./tmk_core/protocol/lufa/lufa.c **** 
1111:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1112:./tmk_core/protocol/lufa/lufa.c **** 
1113:./tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1114:./tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1115:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1116:./tmk_core/protocol/lufa/lufa.c **** }
1117:./tmk_core/protocol/lufa/lufa.c **** 
1118:./tmk_core/protocol/lufa/lufa.c **** 
1119:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1120:./tmk_core/protocol/lufa/lufa.c **** void fallthrough_callback(MidiDevice * device,
1121:./tmk_core/protocol/lufa/lufa.c ****     uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
1122:./tmk_core/protocol/lufa/lufa.c **** void cc_callback(MidiDevice * device,
1123:./tmk_core/protocol/lufa/lufa.c ****     uint8_t chan, uint8_t num, uint8_t val);
1124:./tmk_core/protocol/lufa/lufa.c **** void sysex_callback(MidiDevice * device,
1125:./tmk_core/protocol/lufa/lufa.c ****     uint16_t start, uint8_t length, uint8_t * data);
1126:./tmk_core/protocol/lufa/lufa.c **** #endif
1127:./tmk_core/protocol/lufa/lufa.c **** 
1128:./tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1129:./tmk_core/protocol/lufa/lufa.c **** int main(void)
1130:./tmk_core/protocol/lufa/lufa.c **** {
 989               		.loc 1 1130 0
 990               		.cfi_startproc
 991               	/* prologue: function */
 992               	/* frame size = 0 */
 993               	/* stack size = 0 */
 994               	.L__stack_usage = 0
 995               	.LBB221:
 996               	.LBB222:
1096:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 997               		.loc 1 1096 0
 998 0000 84B7      		in r24,0x34
 999 0002 877F      		andi r24,lo8(-9)
 1000 0004 84BF      		out 0x34,r24
 1001               	.LBB223:
 1002               	.LBB224:
 1003               		.file 5 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** 
 102:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 103:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** #else
 105:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 106:/usr/lib/avr/include/avr/wdt.h **** #endif
 107:/usr/lib/avr/include/avr/wdt.h **** 
 108:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 109:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 110:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 111:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 112:/usr/lib/avr/include/avr/wdt.h **** #else
 113:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 114:/usr/lib/avr/include/avr/wdt.h **** #endif
 115:/usr/lib/avr/include/avr/wdt.h **** 
 116:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 117:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 118:/usr/lib/avr/include/avr/wdt.h **** #else
 119:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 120:/usr/lib/avr/include/avr/wdt.h **** #endif
 121:/usr/lib/avr/include/avr/wdt.h **** 
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** /**
 124:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 125:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 126:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 127:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 128:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 129:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 130:/usr/lib/avr/include/avr/wdt.h **** 
 131:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 132:/usr/lib/avr/include/avr/wdt.h **** */
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h **** 
 135:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** /*
 138:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 139:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 140:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 141:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 142:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 143:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 144:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 145:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 146:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 147:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 148:/usr/lib/avr/include/avr/wdt.h **** */
 149:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 150:/usr/lib/avr/include/avr/wdt.h **** do { \
 151:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 152:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 153:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 155:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 156:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 157:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 158:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 159:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 160:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 161:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 162:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 163:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 164:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 165:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 166:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 167:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 168:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 169:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 170:/usr/lib/avr/include/avr/wdt.h **** ); \
 171:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 172:/usr/lib/avr/include/avr/wdt.h **** 
 173:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 174:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 175:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 176:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 177:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 178:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 179:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 180:/usr/lib/avr/include/avr/wdt.h ****     : \
 181:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 182:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 183:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 184:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 185:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 186:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 187:/usr/lib/avr/include/avr/wdt.h **** );
 188:/usr/lib/avr/include/avr/wdt.h **** 
 189:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 190:/usr/lib/avr/include/avr/wdt.h **** 
 191:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 192:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 193:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 194:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 195:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 196:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 197:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 198:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 199:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 200:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 201:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 202:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 203:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 204:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 205:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 206:/usr/lib/avr/include/avr/wdt.h **** )
 207:/usr/lib/avr/include/avr/wdt.h **** 
 208:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 209:/usr/lib/avr/include/avr/wdt.h **** do { \
 210:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 211:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 212:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 213:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 214:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 215:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 216:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 217:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 218:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 219:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 220:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 221:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 222:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 223:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 224:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 225:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 226:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 227:/usr/lib/avr/include/avr/wdt.h **** ); \
 228:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 229:/usr/lib/avr/include/avr/wdt.h **** 
 230:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 231:/usr/lib/avr/include/avr/wdt.h **** 
 232:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 233:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 234:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 235:/usr/lib/avr/include/avr/wdt.h **** {
 236:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 237:/usr/lib/avr/include/avr/wdt.h **** 	{
 238:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 239:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 240:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 241:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 242:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 243:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 244:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 245:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 246:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 247:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 248:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 249:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 250:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 251:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 252:/usr/lib/avr/include/avr/wdt.h **** 			);
 253:/usr/lib/avr/include/avr/wdt.h **** 	}
 254:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 255:/usr/lib/avr/include/avr/wdt.h **** 	{
 256:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 257:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 258:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 259:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 260:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 261:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 262:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 263:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 264:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 265:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 266:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 267:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 268:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 269:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 270:/usr/lib/avr/include/avr/wdt.h **** 			);
 271:/usr/lib/avr/include/avr/wdt.h **** 	}
 272:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 273:/usr/lib/avr/include/avr/wdt.h **** 	{
 274:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 276:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 277:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 278:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 279:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 280:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 281:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 282:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 283:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 284:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 285:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 286:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 287:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 288:/usr/lib/avr/include/avr/wdt.h **** 			);
 289:/usr/lib/avr/include/avr/wdt.h **** 	}
 290:/usr/lib/avr/include/avr/wdt.h **** 	else
 291:/usr/lib/avr/include/avr/wdt.h ****  	{
 292:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 293:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 294:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 295:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 296:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 297:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 298:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 299:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 300:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 301:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 302:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 303:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 304:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 305:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 306:/usr/lib/avr/include/avr/wdt.h **** 			);
 307:/usr/lib/avr/include/avr/wdt.h **** 	}
 308:/usr/lib/avr/include/avr/wdt.h **** }
 309:/usr/lib/avr/include/avr/wdt.h **** 
 310:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 311:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 312:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 313:/usr/lib/avr/include/avr/wdt.h **** {
 314:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 315:/usr/lib/avr/include/avr/wdt.h **** 	{
 316:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 317:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 318:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 319:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 320:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 321:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 322:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 323:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 327:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 328:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 329:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 330:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 331:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 332:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 333:/usr/lib/avr/include/avr/wdt.h **** 				);
 334:/usr/lib/avr/include/avr/wdt.h **** 	}
 335:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 336:/usr/lib/avr/include/avr/wdt.h **** 	{
 337:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 338:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 339:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 340:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 341:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 348:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 352:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 353:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 				);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 357:/usr/lib/avr/include/avr/wdt.h **** 	{
 358:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 359:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 360:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 361:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 362:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 363:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 364:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 365:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 366:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 369:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 370:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 371:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 372:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 373:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 374:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 375:/usr/lib/avr/include/avr/wdt.h **** 				);
 376:/usr/lib/avr/include/avr/wdt.h **** 	}
 377:/usr/lib/avr/include/avr/wdt.h **** 	else
 378:/usr/lib/avr/include/avr/wdt.h **** 	{
 379:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 380:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 381:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 382:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 383:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 384:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 385:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 386:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 387:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 390:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 391:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 392:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 393:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 394:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 395:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 396:/usr/lib/avr/include/avr/wdt.h **** 				);
 397:/usr/lib/avr/include/avr/wdt.h **** 	}
 398:/usr/lib/avr/include/avr/wdt.h **** }
 399:/usr/lib/avr/include/avr/wdt.h **** 
 400:/usr/lib/avr/include/avr/wdt.h **** #else
 401:/usr/lib/avr/include/avr/wdt.h **** 
 402:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 403:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 404:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 405:/usr/lib/avr/include/avr/wdt.h **** {
 406:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 407:/usr/lib/avr/include/avr/wdt.h **** 	{
 408:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 409:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 416:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 417:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 418:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 419:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 420:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 421:/usr/lib/avr/include/avr/wdt.h **** 		);
 422:/usr/lib/avr/include/avr/wdt.h **** 	}
 423:/usr/lib/avr/include/avr/wdt.h **** 	else
 424:/usr/lib/avr/include/avr/wdt.h **** 	{
 425:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 426:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 427:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 428:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 429:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 433:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 434:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 435:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 436:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 437:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 438:/usr/lib/avr/include/avr/wdt.h **** 		);
 439:/usr/lib/avr/include/avr/wdt.h **** 	}
 440:/usr/lib/avr/include/avr/wdt.h **** }
 441:/usr/lib/avr/include/avr/wdt.h **** 
 442:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 443:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 444:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 445:/usr/lib/avr/include/avr/wdt.h **** {
 446:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 447:/usr/lib/avr/include/avr/wdt.h **** 	{
 448:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 449:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 450:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 451:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 452:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 453:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 454:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 455:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 456:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 457:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 459:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 460:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 461:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 462:/usr/lib/avr/include/avr/wdt.h **** 		);
 463:/usr/lib/avr/include/avr/wdt.h **** 	}
 464:/usr/lib/avr/include/avr/wdt.h **** 	else
 465:/usr/lib/avr/include/avr/wdt.h **** 	{
 466:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 467:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1004               		.loc 5 467 0
 1005               	/* #APP */
 1006               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 1007 0006 0FB6      		in __tmp_reg__,__SREG__
 1008 0008 F894      		cli
 1009 000a A895      		wdr
 1010 000c 8091 6000 		lds r24,96
 1011 0010 8861      		ori r24,24
 1012 0012 8093 6000 		sts 96,r24
 1013 0016 1092 6000 		sts 96,__zero_reg__
 1014 001a 0FBE      		out __SREG__,__tmp_reg__
 1015               		
 1016               	 ;  0 "" 2
 1017               	.LVL79:
 1018               	/* #NOAPP */
 1019               	.LBE224:
 1020               	.LBE223:
1102:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1021               		.loc 1 1102 0
 1022 001c 80E8      		ldi r24,lo8(-128)
 1023 001e 8093 6100 		sts 97,r24
1103:./tmk_core/protocol/lufa/lufa.c **** }
 1024               		.loc 1 1103 0
 1025 0022 1092 6100 		sts 97,__zero_reg__
 1026               	.LBE222:
 1027               	.LBE221:
1131:./tmk_core/protocol/lufa/lufa.c **** 
1132:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1133:./tmk_core/protocol/lufa/lufa.c ****     midi_device_init(&midi_device);
1134:./tmk_core/protocol/lufa/lufa.c ****     midi_device_set_send_func(&midi_device, usb_send_func);
1135:./tmk_core/protocol/lufa/lufa.c ****     midi_device_set_pre_input_process_func(&midi_device, usb_get_midi);
1136:./tmk_core/protocol/lufa/lufa.c **** #endif
1137:./tmk_core/protocol/lufa/lufa.c **** 
1138:./tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
1139:./tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1028               		.loc 1 1139 0
 1029 0026 0E94 0000 		call keyboard_setup
 1030               	.LVL80:
 1031               	.LBB225:
 1032               	.LBB226:
1109:./tmk_core/protocol/lufa/lufa.c **** 
 1033               		.loc 1 1109 0
 1034 002a 0E94 0000 		call USB_Disable
 1035               	.LVL81:
1111:./tmk_core/protocol/lufa/lufa.c **** 
 1036               		.loc 1 1111 0
 1037 002e 0E94 0000 		call USB_Init
 1038               	.LVL82:
 1039               	.LBB227:
 1040               	.LBB228:
 1041               	.LBB229:
 1042               		.loc 4 113 0
 1043 0032 8091 E200 		lds r24,226
 1044 0036 8460      		ori r24,lo8(4)
 1045 0038 8093 E200 		sts 226,r24
 1046               	.LBE229:
 1047               	.LBE228:
 1048               	.LBE227:
 1049               	.LBE226:
 1050               	.LBE225:
1140:./tmk_core/protocol/lufa/lufa.c ****     setup_usb();
1141:./tmk_core/protocol/lufa/lufa.c ****     sei();
 1051               		.loc 1 1141 0
 1052               	/* #APP */
 1053               	 ;  1141 "./tmk_core/protocol/lufa/lufa.c" 1
 1054 003c 7894      		sei
 1055               	 ;  0 "" 2
1142:./tmk_core/protocol/lufa/lufa.c **** 
1143:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1144:./tmk_core/protocol/lufa/lufa.c ****     midi_register_fallthrough_callback(&midi_device, fallthrough_callback);
1145:./tmk_core/protocol/lufa/lufa.c ****     midi_register_cc_callback(&midi_device, cc_callback);
1146:./tmk_core/protocol/lufa/lufa.c ****     midi_register_sysex_callback(&midi_device, sysex_callback);
1147:./tmk_core/protocol/lufa/lufa.c **** 
1148:./tmk_core/protocol/lufa/lufa.c ****     // init_notes();
1149:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 0, 1, 2);
1150:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 15, 1, 0);
1151:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteon(&midi_device, 0, 64, 127);
1152:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteoff(&midi_device, 0, 64, 127);
1153:./tmk_core/protocol/lufa/lufa.c **** #endif
1154:./tmk_core/protocol/lufa/lufa.c **** 
1155:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
1156:./tmk_core/protocol/lufa/lufa.c ****     serial_init();
1157:./tmk_core/protocol/lufa/lufa.c **** #endif
1158:./tmk_core/protocol/lufa/lufa.c **** 
1159:./tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1160:./tmk_core/protocol/lufa/lufa.c **** 
1161:./tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1162:./tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1163:./tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1164:./tmk_core/protocol/lufa/lufa.c ****             ;
1165:./tmk_core/protocol/lufa/lufa.c ****     #else
1166:./tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1167:./tmk_core/protocol/lufa/lufa.c ****     #endif
1168:./tmk_core/protocol/lufa/lufa.c ****     }
1169:./tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1170:./tmk_core/protocol/lufa/lufa.c **** #else
1171:./tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1056               		.loc 1 1171 0
 1057               	/* #NOAPP */
 1058 003e 0E94 0000 		call USB_USBTask
 1059               	.LVL83:
1172:./tmk_core/protocol/lufa/lufa.c **** #endif
1173:./tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1174:./tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1060               		.loc 1 1174 0
 1061 0042 0E94 0000 		call keyboard_init
 1062               	.LVL84:
1175:./tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1063               		.loc 1 1175 0
 1064 0046 80E0      		ldi r24,lo8(lufa_driver)
 1065 0048 90E0      		ldi r25,hi8(lufa_driver)
 1066 004a 0E94 0000 		call host_set_driver
 1067               	.LVL85:
 1068               	.L117:
1176:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1177:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1178:./tmk_core/protocol/lufa/lufa.c **** #endif
1179:./tmk_core/protocol/lufa/lufa.c **** 
1180:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1181:./tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1182:./tmk_core/protocol/lufa/lufa.c **** #endif
1183:./tmk_core/protocol/lufa/lufa.c **** 
1184:./tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
1185:./tmk_core/protocol/lufa/lufa.c ****     while (1) {
1186:./tmk_core/protocol/lufa/lufa.c ****         #if !defined(BLUETOOTH_ENABLE) && !defined(ADAFRUIT_BLE_ENABLE)
1187:./tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1069               		.loc 1 1187 0
 1070 004e 8091 0000 		lds r24,USB_DeviceState
 1071 0052 8530      		cpi r24,lo8(5)
 1072 0054 01F4      		brne .L125
1188:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1189:./tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 1073               		.loc 1 1189 0
 1074 0056 0E94 0000 		call suspend_power_down
 1075               	.LVL86:
1190:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1076               		.loc 1 1190 0
 1077 005a 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1078 005e 8823      		tst r24
 1079 0060 01F0      		breq .L117
 1080               		.loc 1 1190 0 is_stmt 0 discriminator 1
 1081 0062 0E94 0000 		call suspend_wakeup_condition
 1082               	.LVL87:
 1083 0066 8823      		tst r24
 1084 0068 01F0      		breq .L117
1191:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1085               		.loc 1 1191 0 is_stmt 1
 1086 006a 0E94 0000 		call USB_Device_SendRemoteWakeup
 1087               	.LVL88:
 1088 006e 00C0      		rjmp .L117
 1089               	.L125:
1192:./tmk_core/protocol/lufa/lufa.c ****             }
1193:./tmk_core/protocol/lufa/lufa.c ****         }
1194:./tmk_core/protocol/lufa/lufa.c ****         #endif
1195:./tmk_core/protocol/lufa/lufa.c **** 
1196:./tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1090               		.loc 1 1196 0
 1091 0070 0E94 0000 		call keyboard_task
 1092               	.LVL89:
1197:./tmk_core/protocol/lufa/lufa.c **** 
1198:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1199:./tmk_core/protocol/lufa/lufa.c ****         midi_device_process(&midi_device);
1200:./tmk_core/protocol/lufa/lufa.c ****         // MIDI_Task();
1201:./tmk_core/protocol/lufa/lufa.c **** #endif
1202:./tmk_core/protocol/lufa/lufa.c **** 
1203:./tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1204:./tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
1205:./tmk_core/protocol/lufa/lufa.c **** #endif
1206:./tmk_core/protocol/lufa/lufa.c **** 
1207:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
1208:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1209:./tmk_core/protocol/lufa/lufa.c **** #endif
1210:./tmk_core/protocol/lufa/lufa.c **** 
1211:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1212:./tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1213:./tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1214:./tmk_core/protocol/lufa/lufa.c **** #endif
1215:./tmk_core/protocol/lufa/lufa.c **** 
1216:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1217:./tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1218:./tmk_core/protocol/lufa/lufa.c **** #endif
1219:./tmk_core/protocol/lufa/lufa.c **** 
1220:./tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1221:./tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1222:./tmk_core/protocol/lufa/lufa.c **** #endif
1223:./tmk_core/protocol/lufa/lufa.c **** 
1224:./tmk_core/protocol/lufa/lufa.c ****     }
 1093               		.loc 1 1224 0
 1094 0074 00C0      		rjmp .L117
 1095               		.cfi_endproc
 1096               	.LFE133:
 1098               	.global	lufa_driver
 1099               		.section	.data.lufa_driver,"aw",@progbits
 1102               	lufa_driver:
 1103 0000 0000      		.word	gs(keyboard_leds)
 1104 0002 0000      		.word	gs(send_keyboard)
 1105 0004 0000      		.word	gs(send_mouse)
 1106 0006 0000      		.word	gs(send_system)
 1107 0008 0000      		.word	gs(send_consumer)
 1108               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1111               	keyboard_report_sent:
 1112 0000 0000 0000 		.zero	32
 1112      0000 0000 
 1112      0000 0000 
 1112      0000 0000 
 1112      0000 0000 
 1113               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1116               	keyboard_led_stats:
 1117 0000 00        		.zero	1
 1118               	.global	keyboard_protocol
 1119               		.section	.data.keyboard_protocol,"aw",@progbits
 1122               	keyboard_protocol:
 1123 0000 01        		.byte	1
 1124               	.global	keyboard_idle
 1125               		.section	.bss.keyboard_idle,"aw",@nobits
 1128               	keyboard_idle:
 1129 0000 00        		.zero	1
 1130               		.text
 1131               	.Letext0:
 1132               		.file 6 "/usr/lib/avr/include/stdint.h"
 1133               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1134               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1135               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.
 1136               		.file 10 "./tmk_core/common/report.h"
 1137               		.file 11 "./tmk_core/common/host_driver.h"
 1138               		.file 12 "./tmk_core/protocol/lufa/lufa.h"
 1139               		.file 13 "./quantum/keycode_config.h"
 1140               		.file 14 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1141               		.file 15 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1142               		.file 16 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1143               		.file 17 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1144               		.file 18 "./tmk_core/common/suspend.h"
 1145               		.file 19 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8
 1146               		.file 20 "./tmk_core/common/action.h"
 1147               		.file 21 "./tmk_core/common/keyboard.h"
 1148               		.file 22 "./tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/cchw4g4Z.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cchw4g4Z.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cchw4g4Z.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cchw4g4Z.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cchw4g4Z.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cchw4g4Z.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/cchw4g4Z.s:1116   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
     /tmp/cchw4g4Z.s:29     .text.send_consumer:0000000000000000 send_consumer
     /tmp/cchw4g4Z.s:152    .text.send_system:0000000000000000 send_system
     /tmp/cchw4g4Z.s:273    .text.send_mouse:0000000000000000 send_mouse
     /tmp/cchw4g4Z.s:362    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/cchw4g4Z.s:1122   .data.keyboard_protocol:0000000000000000 keyboard_protocol
     /tmp/cchw4g4Z.s:1111   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
     /tmp/cchw4g4Z.s:543    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/cchw4g4Z.s:581    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/cchw4g4Z.s:598    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/cchw4g4Z.s:613    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/cchw4g4Z.s:628    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/cchw4g4Z.s:645    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/cchw4g4Z.s:697    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/cchw4g4Z.s:1128   .bss.keyboard_idle:0000000000000000 keyboard_idle
     /tmp/cchw4g4Z.s:968    .text.sendchar:0000000000000000 sendchar
     /tmp/cchw4g4Z.s:987    .text.startup.main:0000000000000000 main
     /tmp/cchw4g4Z.s:1102   .data.lufa_driver:0000000000000000 lufa_driver

UNDEFINED SYMBOLS
USB_DeviceState
Endpoint_Write_Stream_LE
keymap_config
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
__do_copy_data
__do_clear_bss
