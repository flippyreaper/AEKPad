   1               		.file	"timer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.timer_init,"ax",@progbits
  11               	.global	timer_init
  13               	timer_init:
  14               	.LFB5:
  15               		.file 1 "./tmk_core/common/avr/timer.c"
   1:./tmk_core/common/avr/timer.c **** /*
   2:./tmk_core/common/avr/timer.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/avr/timer.c **** 
   4:./tmk_core/common/avr/timer.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/avr/timer.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/avr/timer.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/avr/timer.c **** (at your option) any later version.
   8:./tmk_core/common/avr/timer.c **** 
   9:./tmk_core/common/avr/timer.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/avr/timer.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/avr/timer.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/avr/timer.c **** GNU General Public License for more details.
  13:./tmk_core/common/avr/timer.c **** 
  14:./tmk_core/common/avr/timer.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/avr/timer.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/avr/timer.c **** */
  17:./tmk_core/common/avr/timer.c **** 
  18:./tmk_core/common/avr/timer.c **** #include <avr/io.h>
  19:./tmk_core/common/avr/timer.c **** #include <avr/interrupt.h>
  20:./tmk_core/common/avr/timer.c **** #include <util/atomic.h>
  21:./tmk_core/common/avr/timer.c **** #include <stdint.h>
  22:./tmk_core/common/avr/timer.c **** #include "timer_avr.h"
  23:./tmk_core/common/avr/timer.c **** #include "timer.h"
  24:./tmk_core/common/avr/timer.c **** 
  25:./tmk_core/common/avr/timer.c **** 
  26:./tmk_core/common/avr/timer.c **** // counter resolution 1ms
  27:./tmk_core/common/avr/timer.c **** // NOTE: union { uint32_t timer32; struct { uint16_t dummy; uint16_t timer16; }}
  28:./tmk_core/common/avr/timer.c **** volatile uint32_t timer_count;
  29:./tmk_core/common/avr/timer.c **** 
  30:./tmk_core/common/avr/timer.c **** void timer_init(void)
  31:./tmk_core/common/avr/timer.c **** {
  16               		.loc 1 31 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  32:./tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  33:./tmk_core/common/avr/timer.c ****     TCCR0A = 0x02;
  22               		.loc 1 33 0
  23 0000 82E0      		ldi r24,lo8(2)
  24 0002 84BD      		out 0x24,r24
  34:./tmk_core/common/avr/timer.c **** 
  35:./tmk_core/common/avr/timer.c **** #if TIMER_PRESCALER == 1
  36:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x01;
  37:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 8
  38:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x02;
  39:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 64
  40:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x03;
  25               		.loc 1 40 0
  26 0004 93E0      		ldi r25,lo8(3)
  27 0006 95BD      		out 0x25,r25
  41:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 256
  42:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x04;
  43:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 1024
  44:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x05;
  45:./tmk_core/common/avr/timer.c **** #else
  46:./tmk_core/common/avr/timer.c **** #   error "Timer prescaler value is NOT vaild."
  47:./tmk_core/common/avr/timer.c **** #endif
  48:./tmk_core/common/avr/timer.c **** 
  49:./tmk_core/common/avr/timer.c ****     OCR0A = TIMER_RAW_TOP;
  28               		.loc 1 49 0
  29 0008 9AEF      		ldi r25,lo8(-6)
  30 000a 97BD      		out 0x27,r25
  50:./tmk_core/common/avr/timer.c ****     TIMSK0 = (1<<OCIE0A);
  31               		.loc 1 50 0
  32 000c 8093 6E00 		sts 110,r24
  33 0010 0895      		ret
  34               		.cfi_endproc
  35               	.LFE5:
  37               		.section	.text.timer_clear,"ax",@progbits
  38               	.global	timer_clear
  40               	timer_clear:
  41               	.LFB6:
  51:./tmk_core/common/avr/timer.c **** }
  52:./tmk_core/common/avr/timer.c **** 
  53:./tmk_core/common/avr/timer.c **** inline
  54:./tmk_core/common/avr/timer.c **** void timer_clear(void)
  55:./tmk_core/common/avr/timer.c **** {
  42               		.loc 1 55 0
  43               		.cfi_startproc
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  48               	.LBB27:
  56:./tmk_core/common/avr/timer.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  49               		.loc 1 56 0
  50 0000 8FB7      		in r24,__SREG__
  51               	.LVL0:
  52               	.LBB28:
  53               	.LBB29:
  54               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id$ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
  55               		.loc 2 50 0
  56               	/* #APP */
  57               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
  58 0002 F894      		cli
  59               	 ;  0 "" 2
  60               	.LVL1:
  61               	/* #NOAPP */
  62               	.LBE29:
  63               	.LBE28:
  57:./tmk_core/common/avr/timer.c ****     timer_count = 0;
  64               		.loc 1 57 0
  65 0004 1092 0000 		sts timer_count,__zero_reg__
  66 0008 1092 0000 		sts timer_count+1,__zero_reg__
  67 000c 1092 0000 		sts timer_count+2,__zero_reg__
  68 0010 1092 0000 		sts timer_count+3,__zero_reg__
  69               	.LVL2:
  70               	.LBB30:
  71               	.LBB31:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/lib/avr/include/util/atomic.h **** }
  60:/usr/lib/avr/include/util/atomic.h **** 
  61:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/lib/avr/include/util/atomic.h **** {
  63:/usr/lib/avr/include/util/atomic.h ****     cli();
  64:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/lib/avr/include/util/atomic.h **** }
  67:/usr/lib/avr/include/util/atomic.h **** 
  68:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/lib/avr/include/util/atomic.h **** {
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
  72               		.loc 2 70 0
  73 0014 8FBF      		out __SREG__,r24
  71:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  74               		.loc 2 71 0
  75 0016 0895      		ret
  76               	.LBE31:
  77               	.LBE30:
  78               	.LBE27:
  79               		.cfi_endproc
  80               	.LFE6:
  82               		.section	.text.timer_read,"ax",@progbits
  83               	.global	timer_read
  85               	timer_read:
  86               	.LFB7:
  58:./tmk_core/common/avr/timer.c ****   }
  59:./tmk_core/common/avr/timer.c **** }
  60:./tmk_core/common/avr/timer.c **** 
  61:./tmk_core/common/avr/timer.c **** inline
  62:./tmk_core/common/avr/timer.c **** uint16_t timer_read(void)
  63:./tmk_core/common/avr/timer.c **** {
  87               		.loc 1 63 0
  88               		.cfi_startproc
  89               	/* prologue: function */
  90               	/* frame size = 0 */
  91               	/* stack size = 0 */
  92               	.L__stack_usage = 0
  93               	.LBB32:
  64:./tmk_core/common/avr/timer.c ****     uint32_t t;
  65:./tmk_core/common/avr/timer.c **** 
  66:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  94               		.loc 1 66 0
  95 0000 2FB7      		in r18,__SREG__
  96               	.LVL3:
  97               	.LBB33:
  98               	.LBB34:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
  99               		.loc 2 50 0
 100               	/* #APP */
 101               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 102 0002 F894      		cli
 103               	 ;  0 "" 2
 104               	.LVL4:
 105               	/* #NOAPP */
 106               	.LBE34:
 107               	.LBE33:
  67:./tmk_core/common/avr/timer.c ****       t = timer_count;
 108               		.loc 1 67 0
 109 0004 8091 0000 		lds r24,timer_count
 110 0008 9091 0000 		lds r25,timer_count+1
 111 000c A091 0000 		lds r26,timer_count+2
 112 0010 B091 0000 		lds r27,timer_count+3
 113               	.LVL5:
 114               	.LBB35:
 115               	.LBB36:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 116               		.loc 2 70 0
 117 0014 2FBF      		out __SREG__,r18
 118               		.loc 2 71 0
 119               	.LBE36:
 120               	.LBE35:
 121               	.LBE32:
  68:./tmk_core/common/avr/timer.c ****     }
  69:./tmk_core/common/avr/timer.c **** 
  70:./tmk_core/common/avr/timer.c ****     return (t & 0xFFFF);
  71:./tmk_core/common/avr/timer.c **** }
 122               		.loc 1 71 0
 123 0016 0895      		ret
 124               		.cfi_endproc
 125               	.LFE7:
 127               		.section	.text.timer_read32,"ax",@progbits
 128               	.global	timer_read32
 130               	timer_read32:
 131               	.LFB8:
  72:./tmk_core/common/avr/timer.c **** 
  73:./tmk_core/common/avr/timer.c **** inline
  74:./tmk_core/common/avr/timer.c **** uint32_t timer_read32(void)
  75:./tmk_core/common/avr/timer.c **** {
 132               		.loc 1 75 0
 133               		.cfi_startproc
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
 138               	.LBB37:
  76:./tmk_core/common/avr/timer.c ****     uint32_t t;
  77:./tmk_core/common/avr/timer.c **** 
  78:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 139               		.loc 1 78 0
 140 0000 2FB7      		in r18,__SREG__
 141               	.LVL6:
 142               	.LBB38:
 143               	.LBB39:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 144               		.loc 2 50 0
 145               	/* #APP */
 146               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 147 0002 F894      		cli
 148               	 ;  0 "" 2
 149               	.LVL7:
 150               	/* #NOAPP */
 151               	.LBE39:
 152               	.LBE38:
  79:./tmk_core/common/avr/timer.c ****       t = timer_count;
 153               		.loc 1 79 0
 154 0004 6091 0000 		lds r22,timer_count
 155 0008 7091 0000 		lds r23,timer_count+1
 156 000c 8091 0000 		lds r24,timer_count+2
 157 0010 9091 0000 		lds r25,timer_count+3
 158               	.LVL8:
 159               	.LBB40:
 160               	.LBB41:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 161               		.loc 2 70 0
 162 0014 2FBF      		out __SREG__,r18
 163               		.loc 2 71 0
 164               	.LBE41:
 165               	.LBE40:
 166               	.LBE37:
  80:./tmk_core/common/avr/timer.c ****     }
  81:./tmk_core/common/avr/timer.c **** 
  82:./tmk_core/common/avr/timer.c ****     return t;
  83:./tmk_core/common/avr/timer.c **** }
 167               		.loc 1 83 0
 168 0016 0895      		ret
 169               		.cfi_endproc
 170               	.LFE8:
 172               		.section	.text.timer_elapsed,"ax",@progbits
 173               	.global	timer_elapsed
 175               	timer_elapsed:
 176               	.LFB9:
  84:./tmk_core/common/avr/timer.c **** 
  85:./tmk_core/common/avr/timer.c **** inline
  86:./tmk_core/common/avr/timer.c **** uint16_t timer_elapsed(uint16_t last)
  87:./tmk_core/common/avr/timer.c **** {
 177               		.loc 1 87 0
 178               		.cfi_startproc
 179               	.LVL9:
 180 0000 CF92      		push r12
 181               	.LCFI0:
 182               		.cfi_def_cfa_offset 3
 183               		.cfi_offset 12, -2
 184 0002 DF92      		push r13
 185               	.LCFI1:
 186               		.cfi_def_cfa_offset 4
 187               		.cfi_offset 13, -3
 188 0004 EF92      		push r14
 189               	.LCFI2:
 190               		.cfi_def_cfa_offset 5
 191               		.cfi_offset 14, -4
 192 0006 FF92      		push r15
 193               	.LCFI3:
 194               		.cfi_def_cfa_offset 6
 195               		.cfi_offset 15, -5
 196 0008 0F93      		push r16
 197               	.LCFI4:
 198               		.cfi_def_cfa_offset 7
 199               		.cfi_offset 16, -6
 200 000a 1F93      		push r17
 201               	.LCFI5:
 202               		.cfi_def_cfa_offset 8
 203               		.cfi_offset 17, -7
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 6 */
 207               	.L__stack_usage = 6
 208               	.LBB42:
  88:./tmk_core/common/avr/timer.c ****     uint32_t t;
  89:./tmk_core/common/avr/timer.c **** 
  90:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 209               		.loc 1 90 0
 210 000c 2FB7      		in r18,__SREG__
 211               	.LVL10:
 212               	.LBB43:
 213               	.LBB44:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 214               		.loc 2 50 0
 215               	/* #APP */
 216               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 217 000e F894      		cli
 218               	 ;  0 "" 2
 219               	.LVL11:
 220               	/* #NOAPP */
 221               	.LBE44:
 222               	.LBE43:
  91:./tmk_core/common/avr/timer.c ****       t = timer_count;
 223               		.loc 1 91 0
 224 0010 4091 0000 		lds r20,timer_count
 225 0014 5091 0000 		lds r21,timer_count+1
 226 0018 6091 0000 		lds r22,timer_count+2
 227 001c 7091 0000 		lds r23,timer_count+3
 228               	.LVL12:
 229               	.LBB45:
 230               	.LBB46:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 231               		.loc 2 70 0
 232 0020 2FBF      		out __SREG__,r18
 233               		.loc 2 71 0
 234               	.LBE46:
 235               	.LBE45:
 236               	.LBE42:
  92:./tmk_core/common/avr/timer.c ****     }
  93:./tmk_core/common/avr/timer.c **** 
  94:./tmk_core/common/avr/timer.c ****     return TIMER_DIFF_16((t & 0xFFFF), last);
 237               		.loc 1 94 0
 238 0022 6A01      		movw r12,r20
 239 0024 7B01      		movw r14,r22
 240 0026 EE24      		clr r14
 241 0028 FF24      		clr r15
 242 002a 8C01      		movw r16,r24
 243 002c 20E0      		ldi r18,0
 244 002e 30E0      		ldi r19,0
 245               	.LVL13:
 246 0030 C016      		cp r12,r16
 247 0032 D106      		cpc r13,r17
 248 0034 E206      		cpc r14,r18
 249 0036 F306      		cpc r15,r19
 250 0038 00F4      		brsh .L8
 251 003a 4150      		subi r20,1
 252 003c 5109      		sbc r21,__zero_reg__
 253               	.LVL14:
 254               	.L8:
 255               		.loc 1 94 0 is_stmt 0 discriminator 2
 256 003e 9A01      		movw r18,r20
 257 0040 281B      		sub r18,r24
 258 0042 390B      		sbc r19,r25
 259 0044 C901      		movw r24,r18
 260               	.LVL15:
 261               	/* epilogue start */
  95:./tmk_core/common/avr/timer.c **** }
 262               		.loc 1 95 0 is_stmt 1 discriminator 2
 263 0046 1F91      		pop r17
 264 0048 0F91      		pop r16
 265               	.LVL16:
 266 004a FF90      		pop r15
 267 004c EF90      		pop r14
 268 004e DF90      		pop r13
 269 0050 CF90      		pop r12
 270 0052 0895      		ret
 271               		.cfi_endproc
 272               	.LFE9:
 274               		.section	.text.timer_elapsed32,"ax",@progbits
 275               	.global	timer_elapsed32
 277               	timer_elapsed32:
 278               	.LFB10:
  96:./tmk_core/common/avr/timer.c **** 
  97:./tmk_core/common/avr/timer.c **** inline
  98:./tmk_core/common/avr/timer.c **** uint32_t timer_elapsed32(uint32_t last)
  99:./tmk_core/common/avr/timer.c **** {
 279               		.loc 1 99 0
 280               		.cfi_startproc
 281               	.LVL17:
 282 0000 CF92      		push r12
 283               	.LCFI6:
 284               		.cfi_def_cfa_offset 3
 285               		.cfi_offset 12, -2
 286 0002 DF92      		push r13
 287               	.LCFI7:
 288               		.cfi_def_cfa_offset 4
 289               		.cfi_offset 13, -3
 290 0004 EF92      		push r14
 291               	.LCFI8:
 292               		.cfi_def_cfa_offset 5
 293               		.cfi_offset 14, -4
 294 0006 FF92      		push r15
 295               	.LCFI9:
 296               		.cfi_def_cfa_offset 6
 297               		.cfi_offset 15, -5
 298 0008 0F93      		push r16
 299               	.LCFI10:
 300               		.cfi_def_cfa_offset 7
 301               		.cfi_offset 16, -6
 302 000a 1F93      		push r17
 303               	.LCFI11:
 304               		.cfi_def_cfa_offset 8
 305               		.cfi_offset 17, -7
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 6 */
 309               	.L__stack_usage = 6
 310               	.LBB47:
 100:./tmk_core/common/avr/timer.c ****     uint32_t t;
 101:./tmk_core/common/avr/timer.c **** 
 102:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 311               		.loc 1 102 0
 312 000c 2FB7      		in r18,__SREG__
 313               	.LVL18:
 314               	.LBB48:
 315               	.LBB49:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 316               		.loc 2 50 0
 317               	/* #APP */
 318               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 319 000e F894      		cli
 320               	 ;  0 "" 2
 321               	.LVL19:
 322               	/* #NOAPP */
 323               	.LBE49:
 324               	.LBE48:
 103:./tmk_core/common/avr/timer.c ****       t = timer_count;
 325               		.loc 1 103 0
 326 0010 C090 0000 		lds r12,timer_count
 327 0014 D090 0000 		lds r13,timer_count+1
 328 0018 E090 0000 		lds r14,timer_count+2
 329 001c F090 0000 		lds r15,timer_count+3
 330               	.LVL20:
 331               	.LBB50:
 332               	.LBB51:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 333               		.loc 2 70 0
 334 0020 2FBF      		out __SREG__,r18
 335               		.loc 2 71 0
 336 0022 9701      		movw r18,r14
 337 0024 8601      		movw r16,r12
 338 0026 061B      		sub r16,r22
 339 0028 170B      		sbc r17,r23
 340 002a 280B      		sbc r18,r24
 341 002c 390B      		sbc r19,r25
 342               	.LBE51:
 343               	.LBE50:
 344               	.LBE47:
 104:./tmk_core/common/avr/timer.c ****     }
 105:./tmk_core/common/avr/timer.c **** 
 106:./tmk_core/common/avr/timer.c ****     return TIMER_DIFF_32(t, last);
 345               		.loc 1 106 0
 346 002e C616      		cp r12,r22
 347 0030 D706      		cpc r13,r23
 348 0032 E806      		cpc r14,r24
 349 0034 F906      		cpc r15,r25
 350 0036 00F0      		brlo .L11
 351               		.loc 1 106 0 is_stmt 0 discriminator 1
 352 0038 C901      		movw r24,r18
 353 003a B801      		movw r22,r16
 354               	.LVL21:
 355 003c 00C0      		rjmp .L12
 356               	.LVL22:
 357               	.L11:
 358               		.loc 1 106 0 discriminator 2
 359 003e C901      		movw r24,r18
 360 0040 B801      		movw r22,r16
 361               	.LVL23:
 362 0042 6150      		subi r22,1
 363 0044 7109      		sbc r23,__zero_reg__
 364 0046 8109      		sbc r24,__zero_reg__
 365 0048 9109      		sbc r25,__zero_reg__
 366               	.L12:
 367               	/* epilogue start */
 107:./tmk_core/common/avr/timer.c **** }
 368               		.loc 1 107 0 is_stmt 1 discriminator 4
 369 004a 1F91      		pop r17
 370 004c 0F91      		pop r16
 371 004e FF90      		pop r15
 372 0050 EF90      		pop r14
 373 0052 DF90      		pop r13
 374 0054 CF90      		pop r12
 375               	.LVL24:
 376 0056 0895      		ret
 377               		.cfi_endproc
 378               	.LFE10:
 380               		.section	.text.__vector_21,"ax",@progbits
 381               	.global	__vector_21
 383               	__vector_21:
 384               	.LFB11:
 108:./tmk_core/common/avr/timer.c **** 
 109:./tmk_core/common/avr/timer.c **** // excecuted once per 1ms.(excess for just timer count?)
 110:./tmk_core/common/avr/timer.c **** ISR(TIMER0_COMPA_vect)
 111:./tmk_core/common/avr/timer.c **** {
 385               		.loc 1 111 0
 386               		.cfi_startproc
 387 0000 1F92      		push r1
 388               	.LCFI12:
 389               		.cfi_def_cfa_offset 3
 390               		.cfi_offset 1, -2
 391 0002 0F92      		push r0
 392               	.LCFI13:
 393               		.cfi_def_cfa_offset 4
 394               		.cfi_offset 0, -3
 395 0004 0FB6      		in r0,__SREG__
 396 0006 0F92      		push r0
 397 0008 1124      		clr __zero_reg__
 398 000a 8F93      		push r24
 399               	.LCFI14:
 400               		.cfi_def_cfa_offset 5
 401               		.cfi_offset 24, -4
 402 000c 9F93      		push r25
 403               	.LCFI15:
 404               		.cfi_def_cfa_offset 6
 405               		.cfi_offset 25, -5
 406 000e AF93      		push r26
 407               	.LCFI16:
 408               		.cfi_def_cfa_offset 7
 409               		.cfi_offset 26, -6
 410 0010 BF93      		push r27
 411               	.LCFI17:
 412               		.cfi_def_cfa_offset 8
 413               		.cfi_offset 27, -7
 414               	/* prologue: Signal */
 415               	/* frame size = 0 */
 416               	/* stack size = 7 */
 417               	.L__stack_usage = 7
 112:./tmk_core/common/avr/timer.c ****     timer_count++;
 418               		.loc 1 112 0
 419 0012 8091 0000 		lds r24,timer_count
 420 0016 9091 0000 		lds r25,timer_count+1
 421 001a A091 0000 		lds r26,timer_count+2
 422 001e B091 0000 		lds r27,timer_count+3
 423 0022 0196      		adiw r24,1
 424 0024 A11D      		adc r26,__zero_reg__
 425 0026 B11D      		adc r27,__zero_reg__
 426 0028 8093 0000 		sts timer_count,r24
 427 002c 9093 0000 		sts timer_count+1,r25
 428 0030 A093 0000 		sts timer_count+2,r26
 429 0034 B093 0000 		sts timer_count+3,r27
 430               	/* epilogue start */
 113:./tmk_core/common/avr/timer.c **** }
 431               		.loc 1 113 0
 432 0038 BF91      		pop r27
 433 003a AF91      		pop r26
 434 003c 9F91      		pop r25
 435 003e 8F91      		pop r24
 436 0040 0F90      		pop r0
 437 0042 0FBE      		out __SREG__,r0
 438 0044 0F90      		pop r0
 439 0046 1F90      		pop r1
 440 0048 1895      		reti
 441               		.cfi_endproc
 442               	.LFE11:
 444               		.comm	timer_count,4,1
 445               		.text
 446               	.Letext0:
 447               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccyCB6MP.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccyCB6MP.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccyCB6MP.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccyCB6MP.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccyCB6MP.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccyCB6MP.s:13     .text.timer_init:0000000000000000 timer_init
     /tmp/ccyCB6MP.s:40     .text.timer_clear:0000000000000000 timer_clear
                            *COM*:0000000000000004 timer_count
     /tmp/ccyCB6MP.s:85     .text.timer_read:0000000000000000 timer_read
     /tmp/ccyCB6MP.s:130    .text.timer_read32:0000000000000000 timer_read32
     /tmp/ccyCB6MP.s:175    .text.timer_elapsed:0000000000000000 timer_elapsed
     /tmp/ccyCB6MP.s:277    .text.timer_elapsed32:0000000000000000 timer_elapsed32
     /tmp/ccyCB6MP.s:383    .text.__vector_21:0000000000000000 __vector_21

UNDEFINED SYMBOLS
__do_clear_bss
